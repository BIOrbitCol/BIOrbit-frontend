{
	"address": "0xc7b3c6112913F316a88De04C757fAb098534833C",
	"abi": [
		{
			"inputs": [],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "approved",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "ApprovalForAll",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "id",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "enum BIOrbit.State",
					"name": "state",
					"type": "uint8"
				},
				{
					"indexed": false,
					"internalType": "string",
					"name": "name",
					"type": "string"
				},
				{
					"indexed": false,
					"internalType": "string",
					"name": "description",
					"type": "string"
				},
				{
					"indexed": false,
					"internalType": "string",
					"name": "extension",
					"type": "string"
				},
				{
					"indexed": false,
					"internalType": "string[][]",
					"name": "footprint",
					"type": "string[][]"
				},
				{
					"indexed": false,
					"internalType": "string",
					"name": "country",
					"type": "string"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "ProjectCreated",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "previousAdminRole",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "newAdminRole",
					"type": "bytes32"
				}
			],
			"name": "RoleAdminChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "RoleGranted",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "RoleRevoked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "ADMIN_ROLE",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "DEFAULT_ADMIN_ROLE",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"name": "Projects",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "id",
					"type": "uint256"
				},
				{
					"internalType": "string",
					"name": "uri",
					"type": "string"
				},
				{
					"internalType": "contract IERC721",
					"name": "nft",
					"type": "address"
				},
				{
					"internalType": "enum BIOrbit.State",
					"name": "state",
					"type": "uint8"
				},
				{
					"internalType": "string",
					"name": "name",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "description",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "extension",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "country",
					"type": "string"
				},
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"components": [
						{
							"internalType": "string[]",
							"name": "detectionDate",
							"type": "string[]"
						},
						{
							"internalType": "string[]",
							"name": "forestCoverExtension",
							"type": "string[]"
						}
					],
					"internalType": "struct BIOrbit.ImageTimeSeries",
					"name": "imageTimeSeries",
					"type": "tuple"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "getApproved",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				}
			],
			"name": "getDetectionDatesAndForestCoverExtensionsByProjectId",
			"outputs": [
				{
					"internalType": "string[][]",
					"name": "",
					"type": "string[][]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getProjects",
			"outputs": [
				{
					"components": [
						{
							"internalType": "uint256",
							"name": "id",
							"type": "uint256"
						},
						{
							"internalType": "string",
							"name": "uri",
							"type": "string"
						},
						{
							"internalType": "contract IERC721",
							"name": "nft",
							"type": "address"
						},
						{
							"internalType": "enum BIOrbit.State",
							"name": "state",
							"type": "uint8"
						},
						{
							"internalType": "string",
							"name": "name",
							"type": "string"
						},
						{
							"internalType": "string",
							"name": "description",
							"type": "string"
						},
						{
							"internalType": "string",
							"name": "extension",
							"type": "string"
						},
						{
							"internalType": "string[][]",
							"name": "footprint",
							"type": "string[][]"
						},
						{
							"internalType": "string",
							"name": "country",
							"type": "string"
						},
						{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						},
						{
							"components": [
								{
									"internalType": "string[]",
									"name": "detectionDate",
									"type": "string[]"
								},
								{
									"internalType": "string[]",
									"name": "forestCoverExtension",
									"type": "string[]"
								}
							],
							"internalType": "struct BIOrbit.ImageTimeSeries",
							"name": "imageTimeSeries",
							"type": "tuple"
						},
						{
							"components": [
								{
									"internalType": "string",
									"name": "detectionDate",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "forestCoverExtension",
									"type": "string"
								}
							],
							"internalType": "struct BIOrbit.Monitoring[]",
							"name": "monitoring",
							"type": "tuple[]"
						}
					],
					"internalType": "struct BIOrbit.Project[]",
					"name": "",
					"type": "tuple[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getProjectsByOwner",
			"outputs": [
				{
					"components": [
						{
							"internalType": "uint256",
							"name": "id",
							"type": "uint256"
						},
						{
							"internalType": "string",
							"name": "uri",
							"type": "string"
						},
						{
							"internalType": "contract IERC721",
							"name": "nft",
							"type": "address"
						},
						{
							"internalType": "enum BIOrbit.State",
							"name": "state",
							"type": "uint8"
						},
						{
							"internalType": "string",
							"name": "name",
							"type": "string"
						},
						{
							"internalType": "string",
							"name": "description",
							"type": "string"
						},
						{
							"internalType": "string",
							"name": "extension",
							"type": "string"
						},
						{
							"internalType": "string[][]",
							"name": "footprint",
							"type": "string[][]"
						},
						{
							"internalType": "string",
							"name": "country",
							"type": "string"
						},
						{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						},
						{
							"components": [
								{
									"internalType": "string[]",
									"name": "detectionDate",
									"type": "string[]"
								},
								{
									"internalType": "string[]",
									"name": "forestCoverExtension",
									"type": "string[]"
								}
							],
							"internalType": "struct BIOrbit.ImageTimeSeries",
							"name": "imageTimeSeries",
							"type": "tuple"
						},
						{
							"components": [
								{
									"internalType": "string",
									"name": "detectionDate",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "forestCoverExtension",
									"type": "string"
								}
							],
							"internalType": "struct BIOrbit.Monitoring[]",
							"name": "monitoring",
							"type": "tuple[]"
						}
					],
					"internalType": "struct BIOrbit.Project[]",
					"name": "",
					"type": "tuple[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				}
			],
			"name": "getRoleAdmin",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "grantRole",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "hasRole",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				}
			],
			"name": "isApprovedForAll",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "_name",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "_description",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "_extension",
					"type": "string"
				},
				{
					"internalType": "string[][]",
					"name": "_footprint",
					"type": "string[][]"
				},
				{
					"internalType": "string",
					"name": "_country",
					"type": "string"
				}
			],
			"name": "mintProject",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "ownerOf",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "projectIdCounter",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "_value",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "renounceRole",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "revokeRole",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"internalType": "bytes",
					"name": "_data",
					"type": "bytes"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "setApprovalForAll",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "string[]",
					"name": "_detectionDate",
					"type": "string[]"
				},
				{
					"internalType": "string[]",
					"name": "_forestCoverExtension",
					"type": "string[]"
				},
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				},
				{
					"internalType": "string",
					"name": "_tokenURI",
					"type": "string"
				}
			],
			"name": "setTokenURI",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes4",
					"name": "interfaceId",
					"type": "bytes4"
				}
			],
			"name": "supportsInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "tokenURI",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	],
	"transactionHash": "0x7b979a80abfcea2dc329e2e70d68540eea8dc09d0ca850e789e0a90e0105f034",
	"receipt": {
		"to": null,
		"from": "0xE8e1543235e6C35C656ef0b28526C61571583f4B",
		"contractAddress": "0x8f9572ea5E7042066445BBe320eFeF306A71011B",
		"transactionIndex": 1,
		"gasUsed": "4404089",
		"logsBloom": "0x
		"blockHash": "0x3095ce2fa24b6d3779cc4ff69957d89e758fa3ad10a373f41a33a9c676e756f8",
		"transactionHash": "0x7b979a80abfcea2dc329e2e70d68540eea8dc09d0ca850e789e0a90e0105f034",
		"logs": [
			{
				"transactionIndex": 1,
				"blockNumber": 36320566,
				"transactionHash": "0x7b979a80abfcea2dc329e2e70d68540eea8dc09d0ca850e789e0a90e0105f034",
				"address": "0x8f9572ea5E7042066445BBe320eFeF306A71011B",
				"topics": [
					"0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
					"0x0000000000000000000000000000000000000000000000000000000000000000",
					"0x000000000000000000000000e8e1543235e6c35c656ef0b28526c61571583f4b",
					"0x000000000000000000000000e8e1543235e6c35c656ef0b28526c61571583f4b"
				],
				"data": "0x",
				"logIndex": 2,
				"blockHash": "0x3095ce2fa24b6d3779cc4ff69957d89e758fa3ad10a373f41a33a9c676e756f8"
			},
			{
				"transactionIndex": 1,
				"blockNumber": 36320566,
				"transactionHash": "0x7b979a80abfcea2dc329e2e70d68540eea8dc09d0ca850e789e0a90e0105f034",
				"address": "0x8f9572ea5E7042066445BBe320eFeF306A71011B",
				"topics": [
					"0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
					"0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
					"0x000000000000000000000000e8e1543235e6c35c656ef0b28526c61571583f4b",
					"0x000000000000000000000000e8e1543235e6c35c656ef0b28526c61571583f4b"
				],
				"data": "0x",
				"logIndex": 3,
				"blockHash": "0x3095ce2fa24b6d3779cc4ff69957d89e758fa3ad10a373f41a33a9c676e756f8"
			},
			{
				"transactionIndex": 1,
				"blockNumber": 36320566,
				"transactionHash": "0x7b979a80abfcea2dc329e2e70d68540eea8dc09d0ca850e789e0a90e0105f034",
				"address": "0x0000000000000000000000000000000000001010",
				"topics": [
					"0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
					"0x0000000000000000000000000000000000000000000000000000000000001010",
					"0x000000000000000000000000e8e1543235e6c35c656ef0b28526c61571583f4b",
					"0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
				],
				"data": "0x000000000000000000000000000000000000000000000000009c76f4bf0df20500000000000000000000000000000000000000000000000014a987d6670b3861000000000000000000000000000000000000000000000a1b457cb120846e4fcb000000000000000000000000000000000000000000000000140d10e1a7fd465c000000000000000000000000000000000000000000000a1b46192815437c41d0",
				"logIndex": 4,
				"blockHash": "0x3095ce2fa24b6d3779cc4ff69957d89e758fa3ad10a373f41a33a9c676e756f8"
			}
		],
		"blockNumber": 36320566,
		"cumulativeGasUsed": "4425089",
		"status": 1,
		"byzantium": true
	},
	"args": [],
	"numDeployments": 3,
	"solcInputHash": "a244676a311d7ad560652dbb14df92a6",
	"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BIOrbit.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"extension\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[][]\",\"name\":\"footprint\",\"type\":\"string[][]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Projects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"enum BIOrbit.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"extension\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string[]\",\"name\":\"detectionDate\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"forestCoverExtension\",\"type\":\"string[]\"}],\"internalType\":\"struct BIOrbit.ImageTimeSeries\",\"name\":\"imageTimeSeries\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getDetectionDatesAndForestCoverExtensionsByProjectId\",\"outputs\":[{\"internalType\":\"string[][]\",\"name\":\"\",\"type\":\"string[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjects\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"enum BIOrbit.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"extension\",\"type\":\"string\"},{\"internalType\":\"string[][]\",\"name\":\"footprint\",\"type\":\"string[][]\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string[]\",\"name\":\"detectionDate\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"forestCoverExtension\",\"type\":\"string[]\"}],\"internalType\":\"struct BIOrbit.ImageTimeSeries\",\"name\":\"imageTimeSeries\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"detectionDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"forestCoverExtension\",\"type\":\"string\"}],\"internalType\":\"struct BIOrbit.Monitoring[]\",\"name\":\"monitoring\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BIOrbit.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectsByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"enum BIOrbit.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"extension\",\"type\":\"string\"},{\"internalType\":\"string[][]\",\"name\":\"footprint\",\"type\":\"string[][]\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string[]\",\"name\":\"detectionDate\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"forestCoverExtension\",\"type\":\"string[]\"}],\"internalType\":\"struct BIOrbit.ImageTimeSeries\",\"name\":\"imageTimeSeries\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"detectionDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"forestCoverExtension\",\"type\":\"string\"}],\"internalType\":\"struct BIOrbit.Monitoring[]\",\"name\":\"monitoring\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BIOrbit.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_extension\",\"type\":\"string\"},{\"internalType\":\"string[][]\",\"name\":\"_footprint\",\"type\":\"string[][]\"},{\"internalType\":\"string\",\"name\":\"_country\",\"type\":\"string\"}],\"name\":\"mintProject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_detectionDate\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_forestCoverExtension\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"}},\"title\":\"BIOrbit  NOTE: BIOrbit is a blockchain-based platform that enables monitoring and protection of Earth's natural resources  through satellite imagery and community engagement. Users can contribute to the platform by donating to monitor  protected areas and purchasing satellite images, ultimately fostering sustainable development and environmental conservation.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BIOrbit.sol\":\"BIOrbit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/BIOrbit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\n/**\\n *  @title BIOrbit\\n *\\n *  NOTE: BIOrbit is a blockchain-based platform that enables monitoring and protection of Earth's natural resources\\n *  through satellite imagery and community engagement. Users can contribute to the platform by donating to monitor\\n *  protected areas and purchasing satellite images, ultimately fostering sustainable development and environmental conservation.\\n *\\n */\\n\\ncontract BIOrbit is ERC721, ERC721URIStorage, AccessControl, ReentrancyGuard {\\n\\tusing Counters for Counters.Counter;\\n\\n\\tbytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\\n\\tCounters.Counter public projectIdCounter;\\n\\n\\t/* Constants and immutable */\\n\\n\\t/* Enumerables */\\n\\n\\tenum State {\\n\\t\\tActive,\\n\\t\\tMonitor,\\n\\t\\tPaused,\\n\\t\\tInactive\\n\\t}\\n\\n\\t/* Struct */\\n\\n\\tstruct Monitoring {\\n\\t\\t// Monitoring\\n\\t\\tstring detectionDate;\\n\\t\\tstring forestCoverExtension;\\n\\t}\\n\\n\\tstruct ImageTimeSeries {\\n\\t\\t// analysis of image time series\\n\\t\\tstring[] detectionDate;\\n\\t\\tstring[] forestCoverExtension;\\n\\t}\\n\\n\\tstruct Project {\\n\\t\\tuint256 id;\\n\\t\\tstring uri;\\n\\t\\tIERC721 nft;\\n\\t\\tState state;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\tstring extension;\\n\\t\\tstring[][] footprint;\\n\\t\\tstring country;\\n\\t\\taddress owner;\\n\\t\\tImageTimeSeries imageTimeSeries;\\n\\t\\tMonitoring[] monitoring;\\n\\t}\\n\\n\\t/* Storage */\\n\\n\\tmapping(uint256 => Project) public Projects;\\n\\n\\t/* Events */\\n\\n\\tevent ProjectCreated(\\n\\t\\tuint256 id,\\n\\t\\tState state,\\n\\t\\tstring name,\\n\\t\\tstring description,\\n\\t\\tstring extension,\\n\\t\\tstring[][] footprint,\\n\\t\\tstring country,\\n\\t\\taddress owner\\n\\t);\\n\\n\\tconstructor() ERC721('BIOrbit', 'BIO') {\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\t_setupRole(ADMIN_ROLE, msg.sender);\\n\\t}\\n\\n\\tfunction mintProject(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _description,\\n\\t\\tstring memory _extension,\\n\\t\\tstring[][] memory _footprint,\\n\\t\\tstring memory _country\\n\\t) external payable {\\n\\t\\tuint256 projectId = _getNextProjectId();\\n\\t\\tProject storage newProject = Projects[projectId];\\n\\n\\t\\tState state = State.Monitor;\\n\\n\\t\\t_setNewProjectData(\\n\\t\\t\\tnewProject,\\n\\t\\t\\tprojectId,\\n\\t\\t\\tstate,\\n\\t\\t\\t_name,\\n\\t\\t\\t_description,\\n\\t\\t\\t_extension,\\n\\t\\t\\t_footprint,\\n\\t\\t\\t_country,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\n\\t\\t_safeMint(msg.sender, projectId);\\n\\n\\t\\temit ProjectCreated(\\n\\t\\t\\tnewProject.id,\\n\\t\\t\\tnewProject.state,\\n\\t\\t\\tnewProject.name,\\n\\t\\t\\tnewProject.description,\\n\\t\\t\\tnewProject.extension,\\n\\t\\t\\tnewProject.footprint,\\n\\t\\t\\tnewProject.country,\\n\\t\\t\\tnewProject.owner\\n\\t\\t);\\n\\t}\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public override(ERC721, IERC721) {\\n\\t\\tsuper.safeTransferFrom(from, to, tokenId);\\n\\n\\t\\t// Update the owner of the project\\n\\t\\tProject storage project = Projects[tokenId];\\n\\t\\tproject.owner = to;\\n\\t}\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) public override(ERC721, IERC721) {\\n\\t\\tsuper.safeTransferFrom(from, to, tokenId, _data);\\n\\n\\t\\t// Update the owner of the project\\n\\t\\tProject storage project = Projects[tokenId];\\n\\t\\tproject.owner = to;\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public override(ERC721, IERC721) {\\n\\t\\tsuper.transferFrom(from, to, tokenId);\\n\\n\\t\\t// Update the owner of the project\\n\\t\\tProject storage project = Projects[tokenId];\\n\\t\\tproject.owner = to;\\n\\t}\\n\\n\\tfunction setTokenURI(\\n\\t\\tstring[] memory _detectionDate,\\n\\t\\tstring[] memory _forestCoverExtension,\\n\\t\\tuint256 _projectId,\\n\\t\\tstring memory _tokenURI\\n\\t) public onlyRole(ADMIN_ROLE) {\\n\\t\\tProject storage project = Projects[_projectId];\\n\\n\\t\\tif (project.state == State.Monitor) {\\n\\t\\t\\t_setTokenURI(_projectId, _tokenURI);\\n\\n\\t\\t\\tImageTimeSeries memory imageTimeSeries = ImageTimeSeries(\\n\\t\\t\\t\\t_detectionDate,\\n\\t\\t\\t\\t_forestCoverExtension\\n\\t\\t\\t);\\n\\t\\t\\tproject.imageTimeSeries = imageTimeSeries;\\n\\t\\t\\tproject.state = State.Active;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (project.state == State.Active) {\\n\\t\\t\\tMonitoring memory monitoring = Monitoring(\\n\\t\\t\\t\\t_detectionDate[0],\\n\\t\\t\\t\\t_forestCoverExtension[0]\\n\\t\\t\\t);\\n\\t\\t\\tproject.monitoring.push(monitoring);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction tokenURI(\\n\\t\\tuint256 tokenId\\n\\t) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n\\t\\treturn super.tokenURI(tokenId);\\n\\t}\\n\\n\\tfunction _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\n\\t\\tsuper._burn(tokenId);\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride(ERC721, ERC721URIStorage, AccessControl)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t// *********************************** //\\n\\t// *        Private functions         * //\\n\\t// *********************************** //\\n\\n\\tfunction _getNextProjectId() private returns (uint256) {\\n\\t\\tuint256 projectId = projectIdCounter.current();\\n\\t\\tprojectIdCounter.increment();\\n\\t\\treturn projectId;\\n\\t}\\n\\n\\tfunction _setNewProjectData(\\n\\t\\tProject storage _newProject,\\n\\t\\tuint256 _id,\\n\\t\\tState _state,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _description,\\n\\t\\tstring memory _extension,\\n\\t\\tstring[][] memory _footprint,\\n\\t\\tstring memory _country,\\n\\t\\taddress _owner\\n\\t) private {\\n\\t\\t_newProject.id = _id;\\n\\t\\t_newProject.state = _state;\\n\\t\\t_newProject.name = _name;\\n\\t\\t_newProject.description = _description;\\n\\t\\t_newProject.extension = _extension;\\n\\t\\t_newProject.footprint = _footprint;\\n\\t\\t_newProject.country = _country;\\n\\t\\t_newProject.owner = _owner;\\n\\t}\\n\\n\\t// ************************************ //\\n\\t// *        Getters & Setters         * //\\n\\t// ************************************ //\\n\\n\\tfunction getProjects()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tonlyRole(ADMIN_ROLE)\\n\\t\\treturns (Project[] memory)\\n\\t{\\n\\t\\tuint256 projectCount = projectIdCounter.current();\\n\\t\\tProject[] memory projects = new Project[](projectCount);\\n\\t\\tuint256 projectsCount = 0;\\n\\n\\t\\tfor (uint256 i = 1; i <= projectCount; i++) {\\n\\t\\t\\tProject storage project = Projects[i];\\n\\t\\t\\tprojects[projectsCount] = project;\\n\\t\\t\\tprojectsCount++;\\n\\t\\t}\\n\\n\\t\\t// Resize the array to remove any unused slots\\n\\t\\tassembly {\\n\\t\\t\\tmstore(projects, projectsCount)\\n\\t\\t}\\n\\n\\t\\treturn projects;\\n\\t}\\n\\n\\tfunction getProjectsByOwner() public view returns (Project[] memory) {\\n\\t\\tuint256 projectCount = projectIdCounter.current();\\n\\t\\tProject[] memory ownedProjects = new Project[](projectCount);\\n\\t\\tuint256 ownedProjectsCount = 0;\\n\\n\\t\\tfor (uint256 i = 1; i <= projectCount; i++) {\\n\\t\\t\\tProject storage project = Projects[i];\\n\\t\\t\\tif (project.owner == msg.sender) {\\n\\t\\t\\t\\townedProjects[ownedProjectsCount] = project;\\n\\t\\t\\t\\townedProjectsCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Resize the array to remove any unused slots\\n\\t\\tassembly {\\n\\t\\t\\tmstore(ownedProjects, ownedProjectsCount)\\n\\t\\t}\\n\\n\\t\\treturn ownedProjects;\\n\\t}\\n\\n\\tfunction getDetectionDatesAndForestCoverExtensionsByProjectId(\\n\\t\\tuint256 _projectId\\n\\t) public view returns (string[][] memory) {\\n\\t\\tProject storage project = Projects[_projectId];\\n\\t\\trequire(\\n\\t\\t\\tproject.owner == msg.sender || hasRole(ADMIN_ROLE, msg.sender),\\n\\t\\t\\t'Access denied'\\n\\t\\t);\\n\\n\\t\\tstring[][] memory detectionData = new string[][](2);\\n\\t\\tdetectionData[0] = project.imageTimeSeries.detectionDate;\\n\\t\\tdetectionData[1] = project.imageTimeSeries.forestCoverExtension;\\n\\n\\t\\t// Temporary arrays to store monitoring data\\n\\t\\tstring[] memory tempDetectionDates = new string[](\\n\\t\\t\\tproject.monitoring.length\\n\\t\\t);\\n\\t\\tstring[] memory tempForestCoverExtensions = new string[](\\n\\t\\t\\tproject.monitoring.length\\n\\t\\t);\\n\\n\\t\\t// Retrieve monitoring data\\n\\t\\tfor (uint256 i = 0; i < project.monitoring.length; i++) {\\n\\t\\t\\ttempDetectionDates[i] = project.monitoring[i].detectionDate;\\n\\t\\t\\ttempForestCoverExtensions[i] = project.monitoring[i].forestCoverExtension;\\n\\t\\t}\\n\\n\\t\\t// Concatenate monitoring data with detectionData arrays\\n\\t\\tdetectionData[0] = concatenateArrays(detectionData[0], tempDetectionDates);\\n\\t\\tdetectionData[1] = concatenateArrays(\\n\\t\\t\\tdetectionData[1],\\n\\t\\t\\ttempForestCoverExtensions\\n\\t\\t);\\n\\n\\t\\treturn detectionData;\\n\\t}\\n\\n\\t// ************************************ //\\n\\t// *        Helpers functions         * //\\n\\t// ************************************ //\\n\\n\\tfunction concatenateArrays(\\n\\t\\tstring[] memory a,\\n\\t\\tstring[] memory b\\n\\t) private pure returns (string[] memory) {\\n\\t\\tstring[] memory result = new string[](a.length + b.length);\\n\\t\\tuint256 i;\\n\\t\\tfor (i = 0; i < a.length; i++) {\\n\\t\\t\\tresult[i] = a[i];\\n\\t\\t}\\n\\t\\tfor (uint256 j = 0; j < b.length; j++) {\\n\\t\\t\\tresult[i++] = b[j];\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n}\\n\",\"keccak256\":\"0x5994455ff5fa4650a2a6efeee3d0eb0a1434f02491f8678614ae6d0c9a8f6151\",\"license\":\"MIT\"}},\"version\":1}",
	"bytecode": "0x60806040523480156200001157600080fd5b5060405180604001604052806007815260200166109253dc989a5d60ca1b8152506040518060400160405280600381526020016242494f60e81b81525081600090816200005f919062000279565b5060016200006e828262000279565b505060016008555062000083600033620000b5565b620000af7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533620000b5565b62000349565b620000c18282620000c5565b5050565b60008281526007602090815260408083206001600160a01b038516845290915290205460ff16620000c15760008281526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001253390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b600281046001821680620001aa57607f821691505b602082108103620001bf57620001bf6200017f565b50919050565b6000620001d6620001d38381565b90565b92915050565b620001e783620001c5565b815460001960089490940293841b1916921b91909117905550565b600062000211818484620001dc565b505050565b81811015620000c1576200022c60008262000202565b60010162000216565b601f82111562000211576000818152602090206020601f850104810160208510156200025e5750805b620002726020601f86010483018262000216565b5050505050565b81516001600160401b0381111562000295576200029562000169565b620002a1825462000195565b620002ae82828562000235565b6020601f831160018114620002e55760008415620002cc5750858201515b600019600886021c198116600286021786555062000341565b600085815260208120601f198616915b82811015620003175788850151825560209485019460019092019101620002f5565b86831015620003345784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b614c6180620003596000396000f3fe60806040526004361061019c5760003560e01c80636352211e116100ec578063b88d4fde1161008a578063d547741f11610064578063d547741f146104c9578063d5977b5e146104e9578063dcc6012814610500578063e985e9c51461051557600080fd5b8063b88d4fde1461045c578063bf8270fe1461047c578063c87b56dd146104a957600080fd5b806391d14854116100c657806391d14854146103f257806395d89b4114610412578063a217fddf14610427578063a22cb4651461043c57600080fd5b80636352211e1461039057806370a08231146103b057806375b238fc146103d057600080fd5b8063248a9ca3116101595780634082fc47116101335780634082fc471461031b57806342842e0e1461032e5780634aae5f4d1461034e57806359886b821461037057600080fd5b8063248a9ca31461029e5780632f2ff15d146102db57806336568abe146102fb57600080fd5b806301ffc9a7146101a157806306fdde03146101d7578063081812fc146101f9578063095ea7b31461022657806321b2416c1461024857806323b872dd1461027e575b600080fd5b3480156101ad57600080fd5b506101c16101bc3660046136e3565b61055e565b6040516101ce919061370e565b60405180910390f35b3480156101e357600080fd5b506101ec61056f565b6040516101ce9190613772565b34801561020557600080fd5b50610219610214366004613794565b610601565b6040516101ce91906137cf565b34801561023257600080fd5b506102466102413660046137f1565b610628565b005b34801561025457600080fd5b50610268610263366004613794565b6106b6565b6040516101ce9a99989796959493929190613967565b34801561028a57600080fd5b50610246610299366004613a25565b610b7e565b3480156102aa57600080fd5b506102ce6102b9366004613794565b60009081526007602052604090206001015490565b6040516101ce9190613a75565b3480156102e757600080fd5b506102466102f6366004613a83565b610bbb565b34801561030757600080fd5b50610246610316366004613a83565b610be0565b610246610329366004613cf1565b610c16565b34801561033a57600080fd5b50610246610349366004613a25565b610ccb565b34801561035a57600080fd5b50610363610cd6565b6040516101ce919061406f565b34801561037c57600080fd5b5061024661038b366004614080565b611568565b34801561039c57600080fd5b506102196103ab366004613794565b6116e8565b3480156103bc57600080fd5b506102ce6103cb366004614131565b61171d565b3480156103dc57600080fd5b506102ce600080516020614c0c83398151915281565b3480156103fe57600080fd5b506101c161040d366004613a83565b611761565b34801561041e57600080fd5b506101ec61178c565b34801561043357600080fd5b506102ce600081565b34801561044857600080fd5b50610246610457366004614165565b61179b565b34801561046857600080fd5b50610246610477366004614198565b6117a6565b34801561048857600080fd5b5061049c610497366004613794565b6117e5565b6040516101ce9190614227565b3480156104b557600080fd5b506101ec6104c4366004613794565b611d46565b3480156104d557600080fd5b506102466104e4366004613a83565b611d51565b3480156104f557600080fd5b506009546102ce9081565b34801561050c57600080fd5b50610363611d76565b34801561052157600080fd5b506101c1610530366004614238565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600061056982612615565b92915050565b60606000805461057e90614270565b80601f01602080910402602001604051908101604052809291908181526020018280546105aa90614270565b80156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b5050505050905090565b600061060c8261263a565b506000908152600460205260409020546001600160a01b031690565b6000610633826116e8565b9050806001600160a01b0316836001600160a01b03160361066f5760405162461bcd60e51b8152600401610666906142dd565b60405180910390fd5b336001600160a01b038216148061068b575061068b8133610530565b6106a75760405162461bcd60e51b815260040161066690614347565b6106b18383612671565b505050565b600a60205260009081526040902080546001820180549192916106d890614270565b80601f016020809104026020016040519081016040528092919081815260200182805461070490614270565b80156107515780601f1061072657610100808354040283529160200191610751565b820191906000526020600020905b81548152906001019060200180831161073457829003601f168201915b50505050600283015460038401805493946001600160a01b03831694600160a01b90930460ff1693509161078490614270565b80601f01602080910402602001604051908101604052809291908181526020018280546107b090614270565b80156107fd5780601f106107d2576101008083540402835291602001916107fd565b820191906000526020600020905b8154815290600101906020018083116107e057829003601f168201915b50505050509080600401805461081290614270565b80601f016020809104026020016040519081016040528092919081815260200182805461083e90614270565b801561088b5780601f106108605761010080835404028352916020019161088b565b820191906000526020600020905b81548152906001019060200180831161086e57829003601f168201915b5050505050908060050180546108a090614270565b80601f01602080910402602001604051908101604052809291908181526020018280546108cc90614270565b80156109195780601f106108ee57610100808354040283529160200191610919565b820191906000526020600020905b8154815290600101906020018083116108fc57829003601f168201915b50505050509080600701805461092e90614270565b80601f016020809104026020016040519081016040528092919081815260200182805461095a90614270565b80156109a75780601f1061097c576101008083540402835291602001916109a7565b820191906000526020600020905b81548152906001019060200180831161098a57829003601f168201915b50505060088401546040805160098701805460606020820284018101855293830181815297986001600160a01b03909516979496509194509284929091849160009085015b82821015610a98578382906000526020600020018054610a0b90614270565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3790614270565b8015610a845780601f10610a5957610100808354040283529160200191610a84565b820191906000526020600020905b815481529060010190602001808311610a6757829003601f168201915b5050505050815260200190600101906109ec565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015610b71578382906000526020600020018054610ae490614270565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1090614270565b8015610b5d5780601f10610b3257610100808354040283529160200191610b5d565b820191906000526020600020905b815481529060010190602001808311610b4057829003601f168201915b505050505081526020019060010190610ac5565b505050508152505090508a565b610b898383836126df565b6000908152600a6020526040902060080180546001600160a01b0319166001600160a01b039290921691909117905550565b600082815260076020526040902060010154610bd681612710565b6106b1838361271a565b6001600160a01b0381163314610c085760405162461bcd60e51b8152600401610666906143a3565b610c1282826127a0565b5050565b6000610c20612807565b6000818152600a602052604090209091506001610c448284838b8b8b8b8b33612828565b610c4e33846128d6565b8154600283015460088401546040517f2f2cd3b0d05e41218db6e35c81868c1bdaebbdab5ffad8f07f6122a3f363f62093610cb9939092600160a01b90910460ff16916003880191600489019160058a019160068b019160078c01916001600160a01b0316906144fd565b60405180910390a15050505050505050565b610b898383836128f0565b60606000610ce360095490565b90506000816001600160401b03811115610cff57610cff613ab6565b604051908082528060200260200182016040528015610d3857816020015b610d256134d0565b815260200190600190039081610d1d5790505b509050600060015b83811161155f576000818152600a602052604090206008810154336001600160a01b039091160361154c57806040518061018001604052908160008201548152602001600182018054610d9290614270565b80601f0160208091040260200160405190810160405280929190818152602001828054610dbe90614270565b8015610e0b5780601f10610de057610100808354040283529160200191610e0b565b820191906000526020600020905b815481529060010190602001808311610dee57829003601f168201915b505050918352505060028201546001600160a01b0381166020830152604090910190600160a01b900460ff166003811115610e4857610e48613876565b6003811115610e5957610e59613876565b8152602001600382018054610e6d90614270565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9990614270565b8015610ee65780601f10610ebb57610100808354040283529160200191610ee6565b820191906000526020600020905b815481529060010190602001808311610ec957829003601f168201915b50505050508152602001600482018054610eff90614270565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2b90614270565b8015610f785780601f10610f4d57610100808354040283529160200191610f78565b820191906000526020600020905b815481529060010190602001808311610f5b57829003601f168201915b50505050508152602001600582018054610f9190614270565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbd90614270565b801561100a5780601f10610fdf5761010080835404028352916020019161100a565b820191906000526020600020905b815481529060010190602001808311610fed57829003601f168201915b5050505050815260200160068201805480602002602001604051908101604052809291908181526020016000905b8282101561112b57838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b8282101561111857838290600052602060002001805461108b90614270565b80601f01602080910402602001604051908101604052809291908181526020018280546110b790614270565b80156111045780601f106110d957610100808354040283529160200191611104565b820191906000526020600020905b8154815290600101906020018083116110e757829003601f168201915b50505050508152602001906001019061106c565b5050505081526020019060010190611038565b50505050815260200160078201805461114390614270565b80601f016020809104026020016040519081016040528092919081815260200182805461116f90614270565b80156111bc5780601f10611191576101008083540402835291602001916111bc565b820191906000526020600020905b81548152906001019060200180831161119f57829003601f168201915b505050918352505060088201546001600160a01b03166020808301919091526040805160098501805460609481028301850184528284018181529390950194919390928492909184919060009085015b828210156112b857838290600052602060002001805461122b90614270565b80601f016020809104026020016040519081016040528092919081815260200182805461125790614270565b80156112a45780601f10611279576101008083540402835291602001916112a4565b820191906000526020600020905b81548152906001019060200180831161128757829003601f168201915b50505050508152602001906001019061120c565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b8282101561139157838290600052602060002001805461130490614270565b80601f016020809104026020016040519081016040528092919081815260200182805461133090614270565b801561137d5780601f106113525761010080835404028352916020019161137d565b820191906000526020600020905b81548152906001019060200180831161136057829003601f168201915b5050505050815260200190600101906112e5565b50505050815250508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b8282101561151857838290600052602060002090600202016040518060400160405290816000820180546113f590614270565b80601f016020809104026020016040519081016040528092919081815260200182805461142190614270565b801561146e5780601f106114435761010080835404028352916020019161146e565b820191906000526020600020905b81548152906001019060200180831161145157829003601f168201915b5050505050815260200160018201805461148790614270565b80601f01602080910402602001604051908101604052809291908181526020018280546114b390614270565b80156115005780601f106114d557610100808354040283529160200191611500565b820191906000526020600020905b8154815290600101906020018083116114e357829003601f168201915b505050505081525050815260200190600101906113c2565b505050508152505084848151811061153257611532614597565b60200260200101819052508280611548906145c3565b9350505b5080611557816145c3565b915050610d40565b50815292915050565b600080516020614c0c83398151915261158081612710565b6000838152600a6020526040902060016002820154600160a01b900460ff1660038111156115b0576115b0613876565b0361161c576115bf848461290b565b6040805180820190915286815260208082018790528751829160098501916115ec918391908c019061356f565b506020828101518051611605926001850192019061356f565b50505050600201805460ff60a01b191690556116e1565b60006002820154600160a01b900460ff16600381111561163e5761163e613876565b036116df57600060405180604001604052808860008151811061166357611663614597565b602002602001015181526020018760008151811061168357611683614597565b602090810291909101810151909152600b840180546001810182556000918252919020825192935083926002909202019081906116c0908261466e565b50602082015160018201906116d5908261466e565b50505050506116e1565b505b5050505050565b6000818152600260205260408120546001600160a01b0316806105695760405162461bcd60e51b815260040161066690614767565b60006001600160a01b0382166117455760405162461bcd60e51b8152600401610666906147bd565b506001600160a01b031660009081526003602052604090205490565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461057e90614270565b610c12338383612993565b6117b284848484612a35565b506000908152600a6020526040902060080180546001600160a01b0319166001600160a01b039290921691909117905550565b6000818152600a602052604090206008810154606091906001600160a01b03163314806118255750611825600080516020614c0c83398151915233611761565b6118415760405162461bcd60e51b8152600401610666906147f1565b60408051600280825260608201909252600091816020015b60608152602001906001900390816118595750506009830180546040805160208084028201810190925282815293945060009084015b8282101561193b5783829060005260206000200180546118ae90614270565b80601f01602080910402602001604051908101604052809291908181526020018280546118da90614270565b80156119275780601f106118fc57610100808354040283529160200191611927565b820191906000526020600020905b81548152906001019060200180831161190a57829003601f168201915b50505050508152602001906001019061188f565b505050508160008151811061195257611952614597565b602002602001018190525081600901600101805480602002602001604051908101604052809291908181526020016000905b82821015611a305783829060005260206000200180546119a390614270565b80601f01602080910402602001604051908101604052809291908181526020018280546119cf90614270565b8015611a1c5780601f106119f157610100808354040283529160200191611a1c565b820191906000526020600020905b8154815290600101906020018083116119ff57829003601f168201915b505050505081526020019060010190611984565b5050505081600181518110611a4757611a47614597565b6020908102919091010152600b8201546000906001600160401b03811115611a7157611a71613ab6565b604051908082528060200260200182016040528015611aa457816020015b6060815260200190600190039081611a8f5790505b50600b8401549091506000906001600160401b03811115611ac757611ac7613ab6565b604051908082528060200260200182016040528015611afa57816020015b6060815260200190600190039081611ae55790505b50905060005b600b850154811015611cb75784600b018181548110611b2157611b21614597565b90600052602060002090600202016000018054611b3d90614270565b80601f0160208091040260200160405190810160405280929190818152602001828054611b6990614270565b8015611bb65780601f10611b8b57610100808354040283529160200191611bb6565b820191906000526020600020905b815481529060010190602001808311611b9957829003601f168201915b5050505050838281518110611bcd57611bcd614597565b602002602001018190525084600b018181548110611bed57611bed614597565b90600052602060002090600202016001018054611c0990614270565b80601f0160208091040260200160405190810160405280929190818152602001828054611c3590614270565b8015611c825780601f10611c5757610100808354040283529160200191611c82565b820191906000526020600020905b815481529060010190602001808311611c6557829003601f168201915b5050505050828281518110611c9957611c99614597565b60200260200101819052508080611caf906145c3565b915050611b00565b50611cdc83600081518110611cce57611cce614597565b602002602001015183612a6d565b83600081518110611cef57611cef614597565b6020026020010181905250611d1e83600181518110611d1057611d10614597565b602002602001015182612a6d565b83600181518110611d3157611d31614597565b60209081029190910101525090949350505050565b606061056982612b8e565b600082815260076020526040902060010154611d6c81612710565b6106b183836127a0565b6060600080516020614c0c833981519152611d9081612710565b6000611d9b60095490565b90506000816001600160401b03811115611db757611db7613ab6565b604051908082528060200260200182016040528015611df057816020015b611ddd6134d0565b815260200190600190039081611dd55790505b509050600060015b83811161260a576000600a60008381526020019081526020016000209050806040518061018001604052908160008201548152602001600182018054611e3d90614270565b80601f0160208091040260200160405190810160405280929190818152602001828054611e6990614270565b8015611eb65780601f10611e8b57610100808354040283529160200191611eb6565b820191906000526020600020905b815481529060010190602001808311611e9957829003601f168201915b505050918352505060028201546001600160a01b0381166020830152604090910190600160a01b900460ff166003811115611ef357611ef3613876565b6003811115611f0457611f04613876565b8152602001600382018054611f1890614270565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4490614270565b8015611f915780601f10611f6657610100808354040283529160200191611f91565b820191906000526020600020905b815481529060010190602001808311611f7457829003601f168201915b50505050508152602001600482018054611faa90614270565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd690614270565b80156120235780601f10611ff857610100808354040283529160200191612023565b820191906000526020600020905b81548152906001019060200180831161200657829003601f168201915b5050505050815260200160058201805461203c90614270565b80601f016020809104026020016040519081016040528092919081815260200182805461206890614270565b80156120b55780601f1061208a576101008083540402835291602001916120b5565b820191906000526020600020905b81548152906001019060200180831161209857829003601f168201915b5050505050815260200160068201805480602002602001604051908101604052809291908181526020016000905b828210156121d657838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b828210156121c357838290600052602060002001805461213690614270565b80601f016020809104026020016040519081016040528092919081815260200182805461216290614270565b80156121af5780601f10612184576101008083540402835291602001916121af565b820191906000526020600020905b81548152906001019060200180831161219257829003601f168201915b505050505081526020019060010190612117565b50505050815260200190600101906120e3565b5050505081526020016007820180546121ee90614270565b80601f016020809104026020016040519081016040528092919081815260200182805461221a90614270565b80156122675780601f1061223c57610100808354040283529160200191612267565b820191906000526020600020905b81548152906001019060200180831161224a57829003601f168201915b505050918352505060088201546001600160a01b03166020808301919091526040805160098501805460609481028301850184528284018181529390950194919390928492909184919060009085015b828210156123635783829060005260206000200180546122d690614270565b80601f016020809104026020016040519081016040528092919081815260200182805461230290614270565b801561234f5780601f106123245761010080835404028352916020019161234f565b820191906000526020600020905b81548152906001019060200180831161233257829003601f168201915b5050505050815260200190600101906122b7565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b8282101561243c5783829060005260206000200180546123af90614270565b80601f01602080910402602001604051908101604052809291908181526020018280546123db90614270565b80156124285780601f106123fd57610100808354040283529160200191612428565b820191906000526020600020905b81548152906001019060200180831161240b57829003601f168201915b505050505081526020019060010190612390565b50505050815250508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b828210156125c357838290600052602060002090600202016040518060400160405290816000820180546124a090614270565b80601f01602080910402602001604051908101604052809291908181526020018280546124cc90614270565b80156125195780601f106124ee57610100808354040283529160200191612519565b820191906000526020600020905b8154815290600101906020018083116124fc57829003601f168201915b5050505050815260200160018201805461253290614270565b80601f016020809104026020016040519081016040528092919081815260200182805461255e90614270565b80156125ab5780601f10612580576101008083540402835291602001916125ab565b820191906000526020600020905b81548152906001019060200180831161258e57829003601f168201915b5050505050815250508152602001906001019061246d565b50505050815250508484815181106125dd576125dd614597565b602002602001018190525082806125f3906145c3565b935050508080612602906145c3565b915050611df8565b5081529250505b5090565b60006001600160e01b03198216637965db0b60e01b1480610569575061056982612c9e565b6000818152600260205260409020546001600160a01b031661266e5760405162461bcd60e51b815260040161066690614767565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906126a6826116e8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6126e93382612cc3565b6127055760405162461bcd60e51b81526004016106669061484b565b6106b1838383612d41565b61266e8133612e69565b6127248282611761565b610c125760008281526007602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561275c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6127aa8282611761565b15610c125760008281526007602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008061281360095490565b9050612823600980546001019055565b919050565b87895560028901805488919060ff60a01b1916600160a01b83600381111561285257612852613876565b021790555060038901612865878261466e565b5060048901612874868261466e565b5060058901612883858261466e565b5082516128999060068b019060208601906135c1565b50600789016128a8838261466e565b5060089890980180546001600160a01b0319166001600160a01b039099169890981790975550505050505050565b610c12828260405180602001604052806000815250612ec2565b6106b1838383604051806020016040528060008152506117a6565b6000828152600260205260409020546001600160a01b031661293f5760405162461bcd60e51b8152600401610666906148a6565b6000828152600660205260409020612957828261466e565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516129879190613a75565b60405180910390a15050565b816001600160a01b0316836001600160a01b0316036129c45760405162461bcd60e51b8152600401610666906148ea565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190612a2890859061370e565b60405180910390a3505050565b612a3f3383612cc3565b612a5b5760405162461bcd60e51b81526004016106669061484b565b612a6784848484612ef5565b50505050565b6060600082518451612a7f91906148fa565b6001600160401b03811115612a9657612a96613ab6565b604051908082528060200260200182016040528015612ac957816020015b6060815260200190600190039081612ab45790505b50905060005b8451811015612b2257848181518110612aea57612aea614597565b6020026020010151828281518110612b0457612b04614597565b60200260200101819052508080612b1a906145c3565b915050612acf565b60005b8451811015612b8457848181518110612b4057612b40614597565b6020026020010151838380612b54906145c3565b945081518110612b6657612b66614597565b60200260200101819052508080612b7c906145c3565b915050612b25565b5090949350505050565b6060612b998261263a565b60008281526006602052604081208054612bb290614270565b80601f0160208091040260200160405190810160405280929190818152602001828054612bde90614270565b8015612c2b5780601f10612c0057610100808354040283529160200191612c2b565b820191906000526020600020905b815481529060010190602001808311612c0e57829003601f168201915b505050505090506000612c4960408051602081019091526000815290565b90508051600003612c5b575092915050565b815115612c8d578082604051602001612c7592919061492f565b60405160208183030381529060405292505050919050565b612c9684612f28565b949350505050565b60006001600160e01b03198216632483248360e11b1480610569575061056982612f9c565b600080612ccf836116e8565b9050806001600160a01b0316846001600160a01b03161480612d1657506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80612c965750836001600160a01b0316612d2f84610601565b6001600160a01b031614949350505050565b826001600160a01b0316612d54826116e8565b6001600160a01b031614612d7a5760405162461bcd60e51b815260040161066690614989565b6001600160a01b038216612da05760405162461bcd60e51b8152600401610666906149da565b826001600160a01b0316612db3826116e8565b6001600160a01b031614612dd95760405162461bcd60e51b815260040161066690614989565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612e738282611761565b610c1257612e8081612fec565b612e8b836020612ffe565b604051602001612e9c9291906149ea565b60408051601f198184030181529082905262461bcd60e51b825261066691600401613772565b612ecc8383613169565b612ed96000848484613264565b6106b15760405162461bcd60e51b815260040161066690614a8d565b612f00848484612d41565b612f0c84848484613264565b612a675760405162461bcd60e51b815260040161066690614a8d565b6060612f338261263a565b6000612f4a60408051602081019091526000815290565b90506000815111612f6a5760405180602001604052806000815250612f95565b80612f7484613365565b604051602001612f8592919061492f565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982166380ac58cd60e01b1480612fcd57506001600160e01b03198216635b5e139f60e01b145b8061056957506301ffc9a760e01b6001600160e01b0319831614610569565b60606105696001600160a01b03831660145b6060600061300d836002614a9d565b6130189060026148fa565b6001600160401b0381111561302f5761302f613ab6565b6040519080825280601f01601f191660200182016040528015613059576020820181803683370190505b509050600360fc1b8160008151811061307457613074614597565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106130a3576130a3614597565b60200101906001600160f81b031916908160001a90535060006130c7846002614a9d565b6130d29060016148fa565b90505b600181111561314a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061310657613106614597565b1a60f81b82828151811061311c5761311c614597565b60200101906001600160f81b031916908160001a90535060049490941c9361314381614abc565b90506130d5565b508315612f955760405162461bcd60e51b815260040161066690614b05565b6001600160a01b03821661318f5760405162461bcd60e51b815260040161066690614b47565b6000818152600260205260409020546001600160a01b0316156131c45760405162461bcd60e51b815260040161066690614b8b565b6000818152600260205260409020546001600160a01b0316156131f95760405162461bcd60e51b815260040161066690614b8b565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561335a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906132a8903390899088908890600401614b9b565b6020604051808303816000875af19250505080156132e3575060408051601f3d908101601f191682019092526132e091810190614bea565b60015b613340573d808015613311576040519150601f19603f3d011682016040523d82523d6000602084013e613316565b606091505b5080516000036133385760405162461bcd60e51b815260040161066690614a8d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612c96565b506001949350505050565b60606000613372836133f8565b60010190506000816001600160401b0381111561339157613391613ab6565b6040519080825280601f01601f1916602001820160405280156133bb576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846133c5575b509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106134375772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613463576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061348157662386f26fc10000830492506010015b6305f5e1008310613499576305f5e100830492506008015b61271083106134ad57612710830492506004015b606483106134bf576064830492506002015b600a83106105695760010192915050565b604051806101800160405280600081526020016060815260200160006001600160a01b031681526020016000600381111561350d5761350d613876565b8152602001606081526020016060815260200160608152602001606081526020016060815260200160006001600160a01b03168152602001613562604051806040016040528060608152602001606081525090565b8152602001606081525090565b8280548282559060005260206000209081019282156135b5579160200282015b828111156135b557825182906135a5908261466e565b509160200191906001019061358f565b5061261192915061361a565b82805482825590600052602060002090810192821561360e579160200282015b8281111561360e57825180516135fe91849160209091019061356f565b50916020019190600101906135e1565b50612611929150613637565b8082111561261157600061362e8282613654565b5060010161361a565b8082111561261157600061364b828261368e565b50600101613637565b50805461366090614270565b6000825580601f10613670575050565b601f01602090049060005260206000209081019061266e91906136ac565b508054600082559060005260206000209081019061266e919061361a565b5b8082111561261157600081556001016136ad565b6001600160e01b031981165b811461266e57600080fd5b8035610569816136c1565b6000602082840312156136f8576136f8600080fd5b6000612c9684846136d8565b8015155b82525050565b602081016105698284613704565b60005b8381101561373757818101518382015260200161371f565b50506000910152565b600061374a825190565b80845260208401935061376181856020860161371c565b601f01601f19169290920192915050565b60208082528101612f958184613740565b806136cd565b803561056981613783565b6000602082840312156137a9576137a9600080fd5b6000612c968484613789565b60006001600160a01b038216610569565b613708816137b5565b6020810161056982846137c6565b6136cd816137b5565b8035610569816137dd565b6000806040838503121561380757613807600080fd5b600061381385856137e6565b925050602061382485828601613789565b9150509250929050565b80613708565b60006105696001600160a01b03831661384b565b90565b6001600160a01b031690565b600061056982613834565b600061056982613857565b61370881613862565b634e487b7160e01b600052602160045260246000fd5b6004811061266e5761266e613876565b806128238161388c565b60006105698261389c565b613708816138a6565b6000612f958383613740565b60006138d0825190565b808452602084019350836020820285016138ea8560200190565b8060005b8581101561391f578484038952815161390785826138ba565b94506020830160209a909a01999250506001016138ee565b5091979650505050505050565b805160408084526000919084019061394482826138c6565b9150506020830151848203602086015261395e82826138c6565b95945050505050565b6101408101613976828d61382e565b8181036020830152613988818c613740565b9050613997604083018b61386d565b6139a4606083018a6138b1565b81810360808301526139b68189613740565b905081810360a08301526139ca8188613740565b905081810360c08301526139de8187613740565b905081810360e08301526139f28186613740565b9050613a026101008301856137c6565b818103610120830152613a15818461392c565b9c9b505050505050505050505050565b600080600060608486031215613a3d57613a3d600080fd5b6000613a4986866137e6565b9350506020613a5a868287016137e6565b9250506040613a6b86828701613789565b9150509250925092565b60208101610569828461382e565b60008060408385031215613a9957613a99600080fd5b6000613aa58585613789565b9250506020613824858286016137e6565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715613af157613af1613ab6565b6040525050565b6000613b0360405190565b90506128238282613acc565b60006001600160401b03821115613b2857613b28613ab6565b601f19601f83011660200192915050565b82818337506000910152565b6000613b58613b5384613b0f565b613af8565b905082815260208101848484011115613b7357613b73600080fd5b6133f0848285613b39565b600082601f830112613b9257613b92600080fd5b8135612c96848260208601613b45565b60006001600160401b03821115613bbb57613bbb613ab6565b5060209081020190565b6000613bd3613b5384613ba2565b83815290506020808201908402830185811115613bf257613bf2600080fd5b835b81811015613c325780356001600160401b03811115613c1557613c15600080fd5b808601613c228982613b7e565b8552505060209283019201613bf4565b5050509392505050565b600082601f830112613c5057613c50600080fd5b8135612c96848260208601613bc5565b6000613c6e613b5384613ba2565b83815290506020808201908402830185811115613c8d57613c8d600080fd5b835b81811015613c325780356001600160401b03811115613cb057613cb0600080fd5b808601613cbd8982613c3c565b8552505060209283019201613c8f565b600082601f830112613ce157613ce1600080fd5b8135612c96848260208601613c60565b600080600080600060a08688031215613d0c57613d0c600080fd5b85356001600160401b03811115613d2557613d25600080fd5b613d3188828901613b7e565b95505060208601356001600160401b03811115613d5057613d50600080fd5b613d5c88828901613b7e565b94505060408601356001600160401b03811115613d7b57613d7b600080fd5b613d8788828901613b7e565b93505060608601356001600160401b03811115613da657613da6600080fd5b613db288828901613ccd565b92505060808601356001600160401b03811115613dd157613dd1600080fd5b613ddd88828901613b7e565b9150509295509295909350565b6000612f9583836138c6565b6000613e00825190565b80845260208401935083602082028501613e1a8560200190565b8060005b8581101561391f5784840389528151613e378582613dea565b94506020830160209a909a0199925050600101613e1e565b8051604080845260009190840190613e678282613740565b9150506020830151848203602086015261395e8282613740565b6000612f958383613e4f565b6000613e97825190565b80845260208401935083602082028501613eb18560200190565b8060005b8581101561391f5784840389528151613ece8582613e81565b94506020830160209a909a0199925050600101613eb5565b8051600090610180840190613efb858261382e565b5060208301518482036020860152613f138282613740565b9150506040830151613f28604086018261386d565b506060830151613f3b60608601826138b1565b5060808301518482036080860152613f538282613740565b91505060a083015184820360a0860152613f6d8282613740565b91505060c083015184820360c0860152613f878282613740565b91505060e083015184820360e0860152613fa18282613df6565b915050610100830151848203610100860152613fbd8282613740565b915050610120830151613fd46101208601826137c6565b50610140830151848203610140860152613fee828261392c565b91505061016083015184820361016086015261395e8282613e8d565b6000612f958383613ee6565b6000614020825190565b8084526020840193508360208202850161403a8560200190565b8060005b8581101561391f5784840389528151614057858261400a565b94506020830160209a909a019992505060010161403e565b60208082528101612f958184614016565b6000806000806080858703121561409957614099600080fd5b84356001600160401b038111156140b2576140b2600080fd5b6140be87828801613c3c565b94505060208501356001600160401b038111156140dd576140dd600080fd5b6140e987828801613c3c565b93505060406140fa87828801613789565b92505060608501356001600160401b0381111561411957614119600080fd5b61412587828801613b7e565b91505092959194509250565b60006020828403121561414657614146600080fd5b6000612c9684846137e6565b8015156136cd565b803561056981614152565b6000806040838503121561417b5761417b600080fd5b600061418785856137e6565b92505060206138248582860161415a565b600080600080608085870312156141b1576141b1600080fd5b60006141bd87876137e6565b94505060206140e9878288016137e6565b60006141d8825190565b808452602084019350836020820285016141f28560200190565b8060005b8581101561391f578484038952815161420f8582613dea565b94506020830160209a909a01999250506001016141f6565b60208082528101612f9581846141ce565b6000806040838503121561424e5761424e600080fd5b6000613aa585856137e6565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061428457607f821691505b6020821081036142965761429661425a565b50919050565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b602082015291505b5060400190565b602080825281016105698161429c565b603d81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015291506142d6565b60208082528101610569816142ed565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b602082015291506142d6565b6020808252810161056981614357565b600081546143c081614270565b8085526020850194506001821680156143e057600181146143f657614424565b60ff198316865260208215150286019350614424565b60008581526020902060005b8381101561441e57815488820152600190910190602001614402565b87019450505b50505092915050565b6000612f9583836143b3565b6000614443825490565b808452602084019350836020820285016144638560009081526020902090565b8060005b8581101561391f5784840389528161447f858261442d565b60209a909a019994505060019182019101614467565b6000612f958383614439565b60006144ab825490565b808452602084019350836020820285016144cb8560009081526020902090565b8060005b8581101561391f578484038952816144e78582614495565b60209a909a0199945050600191820191016144cf565b610100810161450c828b61382e565b614519602083018a6138b1565b818103604083015261452b81896143b3565b9050818103606083015261453f81886143b3565b9050818103608083015261455381876143b3565b905081810360a083015261456781866144a1565b905081810360c083015261457b81856143b3565b905061458a60e08301846137c6565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982036145d6576145d66145ad565b5060010190565b60006105696138488381565b6145f2836145dd565b815460001960089490940293841b1916921b91909117905550565b60006106b18184846145e9565b81811015610c125761462d60008261460d565b60010161461a565b601f8211156106b1576000818152602090206020601f8501048101602085101561465c5750805b6116e16020601f86010483018261461a565b81516001600160401b0381111561468757614687613ab6565b6146918254614270565b61469c828285614635565b6020601f8311600181146146d057600084156146b85750858201515b600019600886021c19811660028602178655506116df565b600085815260208120601f198616915b8281101561470057888501518255602094850194600190920191016146e0565b8683101561471c5784890151600019601f89166008021c191682555b600160028802018855505050505050505050565b601881526000602082017f4552433732313a20696e76616c696420746f6b656e2049440000000000000000815291505b5060200190565b6020808252810161056981614730565b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f7420612076618152683634b21037bbb732b960b91b602082015291506142d6565b6020808252810161056981614777565b600d81526000602082016c1058d8d95cdcc819195b9a5959609a1b81529150614760565b60208082528101610569816147cd565b602d81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581526c1c881bdc88185c1c1c9bdd9959609a1b602082015291506142d6565b6020808252810161056981614801565b602e81526000602082017f45524337323155524953746f726167653a2055524920736574206f66206e6f6e81526d32bc34b9ba32b73a103a37b5b2b760911b602082015291506142d6565b602080825281016105698161485b565b601981526000602082017f4552433732313a20617070726f766520746f2063616c6c65720000000000000081529150614760565b60208082528101610569816148b6565b80820180821115610569576105696145ad565b6000614917825190565b61492581856020860161371c565b9290920192915050565b600061493b828561490d565b9150612c96828461490d565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b602082015291506142d6565b6020808252810161056981614947565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b602082015291506142d6565b6020808252810161056981614999565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526017016000614a1c828561490d565b7001034b99036b4b9b9b4b733903937b6329607d1b815291506011820161493b565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b602082015291506142d6565b6020808252810161056981614a3e565b818102808215838204851417614ab557614ab56145ad565b5092915050565b600081614acb57614acb6145ad565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000614760565b6020808252810161056981614ad3565b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526000614760565b6020808252810161056981614b15565b601c81526000602082017f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081529150614760565b6020808252810161056981614b57565b60808101614ba982876137c6565b614bb660208301866137c6565b614bc3604083018561382e565b8181036060830152614bd58184613740565b9695505050505050565b8051610569816136c1565b600060208284031215614bff57614bff600080fd5b6000612c968484614bdf56fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212209091e768c41e515b15cef78ea9c52da4af622d69b1dd1e8cf65136097a1e1b9a64736f6c63430008130033",
	"deployedBytecode": "0x60806040526004361061019c5760003560e01c80636352211e116100ec578063b88d4fde1161008a578063d547741f11610064578063d547741f146104c9578063d5977b5e146104e9578063dcc6012814610500578063e985e9c51461051557600080fd5b8063b88d4fde1461045c578063bf8270fe1461047c578063c87b56dd146104a957600080fd5b806391d14854116100c657806391d14854146103f257806395d89b4114610412578063a217fddf14610427578063a22cb4651461043c57600080fd5b80636352211e1461039057806370a08231146103b057806375b238fc146103d057600080fd5b8063248a9ca3116101595780634082fc47116101335780634082fc471461031b57806342842e0e1461032e5780634aae5f4d1461034e57806359886b821461037057600080fd5b8063248a9ca31461029e5780632f2ff15d146102db57806336568abe146102fb57600080fd5b806301ffc9a7146101a157806306fdde03146101d7578063081812fc146101f9578063095ea7b31461022657806321b2416c1461024857806323b872dd1461027e575b600080fd5b3480156101ad57600080fd5b506101c16101bc3660046136e3565b61055e565b6040516101ce919061370e565b60405180910390f35b3480156101e357600080fd5b506101ec61056f565b6040516101ce9190613772565b34801561020557600080fd5b50610219610214366004613794565b610601565b6040516101ce91906137cf565b34801561023257600080fd5b506102466102413660046137f1565b610628565b005b34801561025457600080fd5b50610268610263366004613794565b6106b6565b6040516101ce9a99989796959493929190613967565b34801561028a57600080fd5b50610246610299366004613a25565b610b7e565b3480156102aa57600080fd5b506102ce6102b9366004613794565b60009081526007602052604090206001015490565b6040516101ce9190613a75565b3480156102e757600080fd5b506102466102f6366004613a83565b610bbb565b34801561030757600080fd5b50610246610316366004613a83565b610be0565b610246610329366004613cf1565b610c16565b34801561033a57600080fd5b50610246610349366004613a25565b610ccb565b34801561035a57600080fd5b50610363610cd6565b6040516101ce919061406f565b34801561037c57600080fd5b5061024661038b366004614080565b611568565b34801561039c57600080fd5b506102196103ab366004613794565b6116e8565b3480156103bc57600080fd5b506102ce6103cb366004614131565b61171d565b3480156103dc57600080fd5b506102ce600080516020614c0c83398151915281565b3480156103fe57600080fd5b506101c161040d366004613a83565b611761565b34801561041e57600080fd5b506101ec61178c565b34801561043357600080fd5b506102ce600081565b34801561044857600080fd5b50610246610457366004614165565b61179b565b34801561046857600080fd5b50610246610477366004614198565b6117a6565b34801561048857600080fd5b5061049c610497366004613794565b6117e5565b6040516101ce9190614227565b3480156104b557600080fd5b506101ec6104c4366004613794565b611d46565b3480156104d557600080fd5b506102466104e4366004613a83565b611d51565b3480156104f557600080fd5b506009546102ce9081565b34801561050c57600080fd5b50610363611d76565b34801561052157600080fd5b506101c1610530366004614238565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600061056982612615565b92915050565b60606000805461057e90614270565b80601f01602080910402602001604051908101604052809291908181526020018280546105aa90614270565b80156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b5050505050905090565b600061060c8261263a565b506000908152600460205260409020546001600160a01b031690565b6000610633826116e8565b9050806001600160a01b0316836001600160a01b03160361066f5760405162461bcd60e51b8152600401610666906142dd565b60405180910390fd5b336001600160a01b038216148061068b575061068b8133610530565b6106a75760405162461bcd60e51b815260040161066690614347565b6106b18383612671565b505050565b600a60205260009081526040902080546001820180549192916106d890614270565b80601f016020809104026020016040519081016040528092919081815260200182805461070490614270565b80156107515780601f1061072657610100808354040283529160200191610751565b820191906000526020600020905b81548152906001019060200180831161073457829003601f168201915b50505050600283015460038401805493946001600160a01b03831694600160a01b90930460ff1693509161078490614270565b80601f01602080910402602001604051908101604052809291908181526020018280546107b090614270565b80156107fd5780601f106107d2576101008083540402835291602001916107fd565b820191906000526020600020905b8154815290600101906020018083116107e057829003601f168201915b50505050509080600401805461081290614270565b80601f016020809104026020016040519081016040528092919081815260200182805461083e90614270565b801561088b5780601f106108605761010080835404028352916020019161088b565b820191906000526020600020905b81548152906001019060200180831161086e57829003601f168201915b5050505050908060050180546108a090614270565b80601f01602080910402602001604051908101604052809291908181526020018280546108cc90614270565b80156109195780601f106108ee57610100808354040283529160200191610919565b820191906000526020600020905b8154815290600101906020018083116108fc57829003601f168201915b50505050509080600701805461092e90614270565b80601f016020809104026020016040519081016040528092919081815260200182805461095a90614270565b80156109a75780601f1061097c576101008083540402835291602001916109a7565b820191906000526020600020905b81548152906001019060200180831161098a57829003601f168201915b50505060088401546040805160098701805460606020820284018101855293830181815297986001600160a01b03909516979496509194509284929091849160009085015b82821015610a98578382906000526020600020018054610a0b90614270565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3790614270565b8015610a845780601f10610a5957610100808354040283529160200191610a84565b820191906000526020600020905b815481529060010190602001808311610a6757829003601f168201915b5050505050815260200190600101906109ec565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015610b71578382906000526020600020018054610ae490614270565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1090614270565b8015610b5d5780601f10610b3257610100808354040283529160200191610b5d565b820191906000526020600020905b815481529060010190602001808311610b4057829003601f168201915b505050505081526020019060010190610ac5565b505050508152505090508a565b610b898383836126df565b6000908152600a6020526040902060080180546001600160a01b0319166001600160a01b039290921691909117905550565b600082815260076020526040902060010154610bd681612710565b6106b1838361271a565b6001600160a01b0381163314610c085760405162461bcd60e51b8152600401610666906143a3565b610c1282826127a0565b5050565b6000610c20612807565b6000818152600a602052604090209091506001610c448284838b8b8b8b8b33612828565b610c4e33846128d6565b8154600283015460088401546040517f2f2cd3b0d05e41218db6e35c81868c1bdaebbdab5ffad8f07f6122a3f363f62093610cb9939092600160a01b90910460ff16916003880191600489019160058a019160068b019160078c01916001600160a01b0316906144fd565b60405180910390a15050505050505050565b610b898383836128f0565b60606000610ce360095490565b90506000816001600160401b03811115610cff57610cff613ab6565b604051908082528060200260200182016040528015610d3857816020015b610d256134d0565b815260200190600190039081610d1d5790505b509050600060015b83811161155f576000818152600a602052604090206008810154336001600160a01b039091160361154c57806040518061018001604052908160008201548152602001600182018054610d9290614270565b80601f0160208091040260200160405190810160405280929190818152602001828054610dbe90614270565b8015610e0b5780601f10610de057610100808354040283529160200191610e0b565b820191906000526020600020905b815481529060010190602001808311610dee57829003601f168201915b505050918352505060028201546001600160a01b0381166020830152604090910190600160a01b900460ff166003811115610e4857610e48613876565b6003811115610e5957610e59613876565b8152602001600382018054610e6d90614270565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9990614270565b8015610ee65780601f10610ebb57610100808354040283529160200191610ee6565b820191906000526020600020905b815481529060010190602001808311610ec957829003601f168201915b50505050508152602001600482018054610eff90614270565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2b90614270565b8015610f785780601f10610f4d57610100808354040283529160200191610f78565b820191906000526020600020905b815481529060010190602001808311610f5b57829003601f168201915b50505050508152602001600582018054610f9190614270565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbd90614270565b801561100a5780601f10610fdf5761010080835404028352916020019161100a565b820191906000526020600020905b815481529060010190602001808311610fed57829003601f168201915b5050505050815260200160068201805480602002602001604051908101604052809291908181526020016000905b8282101561112b57838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b8282101561111857838290600052602060002001805461108b90614270565b80601f01602080910402602001604051908101604052809291908181526020018280546110b790614270565b80156111045780601f106110d957610100808354040283529160200191611104565b820191906000526020600020905b8154815290600101906020018083116110e757829003601f168201915b50505050508152602001906001019061106c565b5050505081526020019060010190611038565b50505050815260200160078201805461114390614270565b80601f016020809104026020016040519081016040528092919081815260200182805461116f90614270565b80156111bc5780601f10611191576101008083540402835291602001916111bc565b820191906000526020600020905b81548152906001019060200180831161119f57829003601f168201915b505050918352505060088201546001600160a01b03166020808301919091526040805160098501805460609481028301850184528284018181529390950194919390928492909184919060009085015b828210156112b857838290600052602060002001805461122b90614270565b80601f016020809104026020016040519081016040528092919081815260200182805461125790614270565b80156112a45780601f10611279576101008083540402835291602001916112a4565b820191906000526020600020905b81548152906001019060200180831161128757829003601f168201915b50505050508152602001906001019061120c565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b8282101561139157838290600052602060002001805461130490614270565b80601f016020809104026020016040519081016040528092919081815260200182805461133090614270565b801561137d5780601f106113525761010080835404028352916020019161137d565b820191906000526020600020905b81548152906001019060200180831161136057829003601f168201915b5050505050815260200190600101906112e5565b50505050815250508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b8282101561151857838290600052602060002090600202016040518060400160405290816000820180546113f590614270565b80601f016020809104026020016040519081016040528092919081815260200182805461142190614270565b801561146e5780601f106114435761010080835404028352916020019161146e565b820191906000526020600020905b81548152906001019060200180831161145157829003601f168201915b5050505050815260200160018201805461148790614270565b80601f01602080910402602001604051908101604052809291908181526020018280546114b390614270565b80156115005780601f106114d557610100808354040283529160200191611500565b820191906000526020600020905b8154815290600101906020018083116114e357829003601f168201915b505050505081525050815260200190600101906113c2565b505050508152505084848151811061153257611532614597565b60200260200101819052508280611548906145c3565b9350505b5080611557816145c3565b915050610d40565b50815292915050565b600080516020614c0c83398151915261158081612710565b6000838152600a6020526040902060016002820154600160a01b900460ff1660038111156115b0576115b0613876565b0361161c576115bf848461290b565b6040805180820190915286815260208082018790528751829160098501916115ec918391908c019061356f565b506020828101518051611605926001850192019061356f565b50505050600201805460ff60a01b191690556116e1565b60006002820154600160a01b900460ff16600381111561163e5761163e613876565b036116df57600060405180604001604052808860008151811061166357611663614597565b602002602001015181526020018760008151811061168357611683614597565b602090810291909101810151909152600b840180546001810182556000918252919020825192935083926002909202019081906116c0908261466e565b50602082015160018201906116d5908261466e565b50505050506116e1565b505b5050505050565b6000818152600260205260408120546001600160a01b0316806105695760405162461bcd60e51b815260040161066690614767565b60006001600160a01b0382166117455760405162461bcd60e51b8152600401610666906147bd565b506001600160a01b031660009081526003602052604090205490565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461057e90614270565b610c12338383612993565b6117b284848484612a35565b506000908152600a6020526040902060080180546001600160a01b0319166001600160a01b039290921691909117905550565b6000818152600a602052604090206008810154606091906001600160a01b03163314806118255750611825600080516020614c0c83398151915233611761565b6118415760405162461bcd60e51b8152600401610666906147f1565b60408051600280825260608201909252600091816020015b60608152602001906001900390816118595750506009830180546040805160208084028201810190925282815293945060009084015b8282101561193b5783829060005260206000200180546118ae90614270565b80601f01602080910402602001604051908101604052809291908181526020018280546118da90614270565b80156119275780601f106118fc57610100808354040283529160200191611927565b820191906000526020600020905b81548152906001019060200180831161190a57829003601f168201915b50505050508152602001906001019061188f565b505050508160008151811061195257611952614597565b602002602001018190525081600901600101805480602002602001604051908101604052809291908181526020016000905b82821015611a305783829060005260206000200180546119a390614270565b80601f01602080910402602001604051908101604052809291908181526020018280546119cf90614270565b8015611a1c5780601f106119f157610100808354040283529160200191611a1c565b820191906000526020600020905b8154815290600101906020018083116119ff57829003601f168201915b505050505081526020019060010190611984565b5050505081600181518110611a4757611a47614597565b6020908102919091010152600b8201546000906001600160401b03811115611a7157611a71613ab6565b604051908082528060200260200182016040528015611aa457816020015b6060815260200190600190039081611a8f5790505b50600b8401549091506000906001600160401b03811115611ac757611ac7613ab6565b604051908082528060200260200182016040528015611afa57816020015b6060815260200190600190039081611ae55790505b50905060005b600b850154811015611cb75784600b018181548110611b2157611b21614597565b90600052602060002090600202016000018054611b3d90614270565b80601f0160208091040260200160405190810160405280929190818152602001828054611b6990614270565b8015611bb65780601f10611b8b57610100808354040283529160200191611bb6565b820191906000526020600020905b815481529060010190602001808311611b9957829003601f168201915b5050505050838281518110611bcd57611bcd614597565b602002602001018190525084600b018181548110611bed57611bed614597565b90600052602060002090600202016001018054611c0990614270565b80601f0160208091040260200160405190810160405280929190818152602001828054611c3590614270565b8015611c825780601f10611c5757610100808354040283529160200191611c82565b820191906000526020600020905b815481529060010190602001808311611c6557829003601f168201915b5050505050828281518110611c9957611c99614597565b60200260200101819052508080611caf906145c3565b915050611b00565b50611cdc83600081518110611cce57611cce614597565b602002602001015183612a6d565b83600081518110611cef57611cef614597565b6020026020010181905250611d1e83600181518110611d1057611d10614597565b602002602001015182612a6d565b83600181518110611d3157611d31614597565b60209081029190910101525090949350505050565b606061056982612b8e565b600082815260076020526040902060010154611d6c81612710565b6106b183836127a0565b6060600080516020614c0c833981519152611d9081612710565b6000611d9b60095490565b90506000816001600160401b03811115611db757611db7613ab6565b604051908082528060200260200182016040528015611df057816020015b611ddd6134d0565b815260200190600190039081611dd55790505b509050600060015b83811161260a576000600a60008381526020019081526020016000209050806040518061018001604052908160008201548152602001600182018054611e3d90614270565b80601f0160208091040260200160405190810160405280929190818152602001828054611e6990614270565b8015611eb65780601f10611e8b57610100808354040283529160200191611eb6565b820191906000526020600020905b815481529060010190602001808311611e9957829003601f168201915b505050918352505060028201546001600160a01b0381166020830152604090910190600160a01b900460ff166003811115611ef357611ef3613876565b6003811115611f0457611f04613876565b8152602001600382018054611f1890614270565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4490614270565b8015611f915780601f10611f6657610100808354040283529160200191611f91565b820191906000526020600020905b815481529060010190602001808311611f7457829003601f168201915b50505050508152602001600482018054611faa90614270565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd690614270565b80156120235780601f10611ff857610100808354040283529160200191612023565b820191906000526020600020905b81548152906001019060200180831161200657829003601f168201915b5050505050815260200160058201805461203c90614270565b80601f016020809104026020016040519081016040528092919081815260200182805461206890614270565b80156120b55780601f1061208a576101008083540402835291602001916120b5565b820191906000526020600020905b81548152906001019060200180831161209857829003601f168201915b5050505050815260200160068201805480602002602001604051908101604052809291908181526020016000905b828210156121d657838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b828210156121c357838290600052602060002001805461213690614270565b80601f016020809104026020016040519081016040528092919081815260200182805461216290614270565b80156121af5780601f10612184576101008083540402835291602001916121af565b820191906000526020600020905b81548152906001019060200180831161219257829003601f168201915b505050505081526020019060010190612117565b50505050815260200190600101906120e3565b5050505081526020016007820180546121ee90614270565b80601f016020809104026020016040519081016040528092919081815260200182805461221a90614270565b80156122675780601f1061223c57610100808354040283529160200191612267565b820191906000526020600020905b81548152906001019060200180831161224a57829003601f168201915b505050918352505060088201546001600160a01b03166020808301919091526040805160098501805460609481028301850184528284018181529390950194919390928492909184919060009085015b828210156123635783829060005260206000200180546122d690614270565b80601f016020809104026020016040519081016040528092919081815260200182805461230290614270565b801561234f5780601f106123245761010080835404028352916020019161234f565b820191906000526020600020905b81548152906001019060200180831161233257829003601f168201915b5050505050815260200190600101906122b7565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b8282101561243c5783829060005260206000200180546123af90614270565b80601f01602080910402602001604051908101604052809291908181526020018280546123db90614270565b80156124285780601f106123fd57610100808354040283529160200191612428565b820191906000526020600020905b81548152906001019060200180831161240b57829003601f168201915b505050505081526020019060010190612390565b50505050815250508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b828210156125c357838290600052602060002090600202016040518060400160405290816000820180546124a090614270565b80601f01602080910402602001604051908101604052809291908181526020018280546124cc90614270565b80156125195780601f106124ee57610100808354040283529160200191612519565b820191906000526020600020905b8154815290600101906020018083116124fc57829003601f168201915b5050505050815260200160018201805461253290614270565b80601f016020809104026020016040519081016040528092919081815260200182805461255e90614270565b80156125ab5780601f10612580576101008083540402835291602001916125ab565b820191906000526020600020905b81548152906001019060200180831161258e57829003601f168201915b5050505050815250508152602001906001019061246d565b50505050815250508484815181106125dd576125dd614597565b602002602001018190525082806125f3906145c3565b935050508080612602906145c3565b915050611df8565b5081529250505b5090565b60006001600160e01b03198216637965db0b60e01b1480610569575061056982612c9e565b6000818152600260205260409020546001600160a01b031661266e5760405162461bcd60e51b815260040161066690614767565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906126a6826116e8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6126e93382612cc3565b6127055760405162461bcd60e51b81526004016106669061484b565b6106b1838383612d41565b61266e8133612e69565b6127248282611761565b610c125760008281526007602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561275c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6127aa8282611761565b15610c125760008281526007602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008061281360095490565b9050612823600980546001019055565b919050565b87895560028901805488919060ff60a01b1916600160a01b83600381111561285257612852613876565b021790555060038901612865878261466e565b5060048901612874868261466e565b5060058901612883858261466e565b5082516128999060068b019060208601906135c1565b50600789016128a8838261466e565b5060089890980180546001600160a01b0319166001600160a01b039099169890981790975550505050505050565b610c12828260405180602001604052806000815250612ec2565b6106b1838383604051806020016040528060008152506117a6565b6000828152600260205260409020546001600160a01b031661293f5760405162461bcd60e51b8152600401610666906148a6565b6000828152600660205260409020612957828261466e565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516129879190613a75565b60405180910390a15050565b816001600160a01b0316836001600160a01b0316036129c45760405162461bcd60e51b8152600401610666906148ea565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190612a2890859061370e565b60405180910390a3505050565b612a3f3383612cc3565b612a5b5760405162461bcd60e51b81526004016106669061484b565b612a6784848484612ef5565b50505050565b6060600082518451612a7f91906148fa565b6001600160401b03811115612a9657612a96613ab6565b604051908082528060200260200182016040528015612ac957816020015b6060815260200190600190039081612ab45790505b50905060005b8451811015612b2257848181518110612aea57612aea614597565b6020026020010151828281518110612b0457612b04614597565b60200260200101819052508080612b1a906145c3565b915050612acf565b60005b8451811015612b8457848181518110612b4057612b40614597565b6020026020010151838380612b54906145c3565b945081518110612b6657612b66614597565b60200260200101819052508080612b7c906145c3565b915050612b25565b5090949350505050565b6060612b998261263a565b60008281526006602052604081208054612bb290614270565b80601f0160208091040260200160405190810160405280929190818152602001828054612bde90614270565b8015612c2b5780601f10612c0057610100808354040283529160200191612c2b565b820191906000526020600020905b815481529060010190602001808311612c0e57829003601f168201915b505050505090506000612c4960408051602081019091526000815290565b90508051600003612c5b575092915050565b815115612c8d578082604051602001612c7592919061492f565b60405160208183030381529060405292505050919050565b612c9684612f28565b949350505050565b60006001600160e01b03198216632483248360e11b1480610569575061056982612f9c565b600080612ccf836116e8565b9050806001600160a01b0316846001600160a01b03161480612d1657506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80612c965750836001600160a01b0316612d2f84610601565b6001600160a01b031614949350505050565b826001600160a01b0316612d54826116e8565b6001600160a01b031614612d7a5760405162461bcd60e51b815260040161066690614989565b6001600160a01b038216612da05760405162461bcd60e51b8152600401610666906149da565b826001600160a01b0316612db3826116e8565b6001600160a01b031614612dd95760405162461bcd60e51b815260040161066690614989565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612e738282611761565b610c1257612e8081612fec565b612e8b836020612ffe565b604051602001612e9c9291906149ea565b60408051601f198184030181529082905262461bcd60e51b825261066691600401613772565b612ecc8383613169565b612ed96000848484613264565b6106b15760405162461bcd60e51b815260040161066690614a8d565b612f00848484612d41565b612f0c84848484613264565b612a675760405162461bcd60e51b815260040161066690614a8d565b6060612f338261263a565b6000612f4a60408051602081019091526000815290565b90506000815111612f6a5760405180602001604052806000815250612f95565b80612f7484613365565b604051602001612f8592919061492f565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982166380ac58cd60e01b1480612fcd57506001600160e01b03198216635b5e139f60e01b145b8061056957506301ffc9a760e01b6001600160e01b0319831614610569565b60606105696001600160a01b03831660145b6060600061300d836002614a9d565b6130189060026148fa565b6001600160401b0381111561302f5761302f613ab6565b6040519080825280601f01601f191660200182016040528015613059576020820181803683370190505b509050600360fc1b8160008151811061307457613074614597565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106130a3576130a3614597565b60200101906001600160f81b031916908160001a90535060006130c7846002614a9d565b6130d29060016148fa565b90505b600181111561314a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061310657613106614597565b1a60f81b82828151811061311c5761311c614597565b60200101906001600160f81b031916908160001a90535060049490941c9361314381614abc565b90506130d5565b508315612f955760405162461bcd60e51b815260040161066690614b05565b6001600160a01b03821661318f5760405162461bcd60e51b815260040161066690614b47565b6000818152600260205260409020546001600160a01b0316156131c45760405162461bcd60e51b815260040161066690614b8b565b6000818152600260205260409020546001600160a01b0316156131f95760405162461bcd60e51b815260040161066690614b8b565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561335a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906132a8903390899088908890600401614b9b565b6020604051808303816000875af19250505080156132e3575060408051601f3d908101601f191682019092526132e091810190614bea565b60015b613340573d808015613311576040519150601f19603f3d011682016040523d82523d6000602084013e613316565b606091505b5080516000036133385760405162461bcd60e51b815260040161066690614a8d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612c96565b506001949350505050565b60606000613372836133f8565b60010190506000816001600160401b0381111561339157613391613ab6565b6040519080825280601f01601f1916602001820160405280156133bb576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846133c5575b509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106134375772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613463576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061348157662386f26fc10000830492506010015b6305f5e1008310613499576305f5e100830492506008015b61271083106134ad57612710830492506004015b606483106134bf576064830492506002015b600a83106105695760010192915050565b604051806101800160405280600081526020016060815260200160006001600160a01b031681526020016000600381111561350d5761350d613876565b8152602001606081526020016060815260200160608152602001606081526020016060815260200160006001600160a01b03168152602001613562604051806040016040528060608152602001606081525090565b8152602001606081525090565b8280548282559060005260206000209081019282156135b5579160200282015b828111156135b557825182906135a5908261466e565b509160200191906001019061358f565b5061261192915061361a565b82805482825590600052602060002090810192821561360e579160200282015b8281111561360e57825180516135fe91849160209091019061356f565b50916020019190600101906135e1565b50612611929150613637565b8082111561261157600061362e8282613654565b5060010161361a565b8082111561261157600061364b828261368e565b50600101613637565b50805461366090614270565b6000825580601f10613670575050565b601f01602090049060005260206000209081019061266e91906136ac565b508054600082559060005260206000209081019061266e919061361a565b5b8082111561261157600081556001016136ad565b6001600160e01b031981165b811461266e57600080fd5b8035610569816136c1565b6000602082840312156136f8576136f8600080fd5b6000612c9684846136d8565b8015155b82525050565b602081016105698284613704565b60005b8381101561373757818101518382015260200161371f565b50506000910152565b600061374a825190565b80845260208401935061376181856020860161371c565b601f01601f19169290920192915050565b60208082528101612f958184613740565b806136cd565b803561056981613783565b6000602082840312156137a9576137a9600080fd5b6000612c968484613789565b60006001600160a01b038216610569565b613708816137b5565b6020810161056982846137c6565b6136cd816137b5565b8035610569816137dd565b6000806040838503121561380757613807600080fd5b600061381385856137e6565b925050602061382485828601613789565b9150509250929050565b80613708565b60006105696001600160a01b03831661384b565b90565b6001600160a01b031690565b600061056982613834565b600061056982613857565b61370881613862565b634e487b7160e01b600052602160045260246000fd5b6004811061266e5761266e613876565b806128238161388c565b60006105698261389c565b613708816138a6565b6000612f958383613740565b60006138d0825190565b808452602084019350836020820285016138ea8560200190565b8060005b8581101561391f578484038952815161390785826138ba565b94506020830160209a909a01999250506001016138ee565b5091979650505050505050565b805160408084526000919084019061394482826138c6565b9150506020830151848203602086015261395e82826138c6565b95945050505050565b6101408101613976828d61382e565b8181036020830152613988818c613740565b9050613997604083018b61386d565b6139a4606083018a6138b1565b81810360808301526139b68189613740565b905081810360a08301526139ca8188613740565b905081810360c08301526139de8187613740565b905081810360e08301526139f28186613740565b9050613a026101008301856137c6565b818103610120830152613a15818461392c565b9c9b505050505050505050505050565b600080600060608486031215613a3d57613a3d600080fd5b6000613a4986866137e6565b9350506020613a5a868287016137e6565b9250506040613a6b86828701613789565b9150509250925092565b60208101610569828461382e565b60008060408385031215613a9957613a99600080fd5b6000613aa58585613789565b9250506020613824858286016137e6565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715613af157613af1613ab6565b6040525050565b6000613b0360405190565b90506128238282613acc565b60006001600160401b03821115613b2857613b28613ab6565b601f19601f83011660200192915050565b82818337506000910152565b6000613b58613b5384613b0f565b613af8565b905082815260208101848484011115613b7357613b73600080fd5b6133f0848285613b39565b600082601f830112613b9257613b92600080fd5b8135612c96848260208601613b45565b60006001600160401b03821115613bbb57613bbb613ab6565b5060209081020190565b6000613bd3613b5384613ba2565b83815290506020808201908402830185811115613bf257613bf2600080fd5b835b81811015613c325780356001600160401b03811115613c1557613c15600080fd5b808601613c228982613b7e565b8552505060209283019201613bf4565b5050509392505050565b600082601f830112613c5057613c50600080fd5b8135612c96848260208601613bc5565b6000613c6e613b5384613ba2565b83815290506020808201908402830185811115613c8d57613c8d600080fd5b835b81811015613c325780356001600160401b03811115613cb057613cb0600080fd5b808601613cbd8982613c3c565b8552505060209283019201613c8f565b600082601f830112613ce157613ce1600080fd5b8135612c96848260208601613c60565b600080600080600060a08688031215613d0c57613d0c600080fd5b85356001600160401b03811115613d2557613d25600080fd5b613d3188828901613b7e565b95505060208601356001600160401b03811115613d5057613d50600080fd5b613d5c88828901613b7e565b94505060408601356001600160401b03811115613d7b57613d7b600080fd5b613d8788828901613b7e565b93505060608601356001600160401b03811115613da657613da6600080fd5b613db288828901613ccd565b92505060808601356001600160401b03811115613dd157613dd1600080fd5b613ddd88828901613b7e565b9150509295509295909350565b6000612f9583836138c6565b6000613e00825190565b80845260208401935083602082028501613e1a8560200190565b8060005b8581101561391f5784840389528151613e378582613dea565b94506020830160209a909a0199925050600101613e1e565b8051604080845260009190840190613e678282613740565b9150506020830151848203602086015261395e8282613740565b6000612f958383613e4f565b6000613e97825190565b80845260208401935083602082028501613eb18560200190565b8060005b8581101561391f5784840389528151613ece8582613e81565b94506020830160209a909a0199925050600101613eb5565b8051600090610180840190613efb858261382e565b5060208301518482036020860152613f138282613740565b9150506040830151613f28604086018261386d565b506060830151613f3b60608601826138b1565b5060808301518482036080860152613f538282613740565b91505060a083015184820360a0860152613f6d8282613740565b91505060c083015184820360c0860152613f878282613740565b91505060e083015184820360e0860152613fa18282613df6565b915050610100830151848203610100860152613fbd8282613740565b915050610120830151613fd46101208601826137c6565b50610140830151848203610140860152613fee828261392c565b91505061016083015184820361016086015261395e8282613e8d565b6000612f958383613ee6565b6000614020825190565b8084526020840193508360208202850161403a8560200190565b8060005b8581101561391f5784840389528151614057858261400a565b94506020830160209a909a019992505060010161403e565b60208082528101612f958184614016565b6000806000806080858703121561409957614099600080fd5b84356001600160401b038111156140b2576140b2600080fd5b6140be87828801613c3c565b94505060208501356001600160401b038111156140dd576140dd600080fd5b6140e987828801613c3c565b93505060406140fa87828801613789565b92505060608501356001600160401b0381111561411957614119600080fd5b61412587828801613b7e565b91505092959194509250565b60006020828403121561414657614146600080fd5b6000612c9684846137e6565b8015156136cd565b803561056981614152565b6000806040838503121561417b5761417b600080fd5b600061418785856137e6565b92505060206138248582860161415a565b600080600080608085870312156141b1576141b1600080fd5b60006141bd87876137e6565b94505060206140e9878288016137e6565b60006141d8825190565b808452602084019350836020820285016141f28560200190565b8060005b8581101561391f578484038952815161420f8582613dea565b94506020830160209a909a01999250506001016141f6565b60208082528101612f9581846141ce565b6000806040838503121561424e5761424e600080fd5b6000613aa585856137e6565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061428457607f821691505b6020821081036142965761429661425a565b50919050565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b602082015291505b5060400190565b602080825281016105698161429c565b603d81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015291506142d6565b60208082528101610569816142ed565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b602082015291506142d6565b6020808252810161056981614357565b600081546143c081614270565b8085526020850194506001821680156143e057600181146143f657614424565b60ff198316865260208215150286019350614424565b60008581526020902060005b8381101561441e57815488820152600190910190602001614402565b87019450505b50505092915050565b6000612f9583836143b3565b6000614443825490565b808452602084019350836020820285016144638560009081526020902090565b8060005b8581101561391f5784840389528161447f858261442d565b60209a909a019994505060019182019101614467565b6000612f958383614439565b60006144ab825490565b808452602084019350836020820285016144cb8560009081526020902090565b8060005b8581101561391f578484038952816144e78582614495565b60209a909a0199945050600191820191016144cf565b610100810161450c828b61382e565b614519602083018a6138b1565b818103604083015261452b81896143b3565b9050818103606083015261453f81886143b3565b9050818103608083015261455381876143b3565b905081810360a083015261456781866144a1565b905081810360c083015261457b81856143b3565b905061458a60e08301846137c6565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982036145d6576145d66145ad565b5060010190565b60006105696138488381565b6145f2836145dd565b815460001960089490940293841b1916921b91909117905550565b60006106b18184846145e9565b81811015610c125761462d60008261460d565b60010161461a565b601f8211156106b1576000818152602090206020601f8501048101602085101561465c5750805b6116e16020601f86010483018261461a565b81516001600160401b0381111561468757614687613ab6565b6146918254614270565b61469c828285614635565b6020601f8311600181146146d057600084156146b85750858201515b600019600886021c19811660028602178655506116df565b600085815260208120601f198616915b8281101561470057888501518255602094850194600190920191016146e0565b8683101561471c5784890151600019601f89166008021c191682555b600160028802018855505050505050505050565b601881526000602082017f4552433732313a20696e76616c696420746f6b656e2049440000000000000000815291505b5060200190565b6020808252810161056981614730565b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f7420612076618152683634b21037bbb732b960b91b602082015291506142d6565b6020808252810161056981614777565b600d81526000602082016c1058d8d95cdcc819195b9a5959609a1b81529150614760565b60208082528101610569816147cd565b602d81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581526c1c881bdc88185c1c1c9bdd9959609a1b602082015291506142d6565b6020808252810161056981614801565b602e81526000602082017f45524337323155524953746f726167653a2055524920736574206f66206e6f6e81526d32bc34b9ba32b73a103a37b5b2b760911b602082015291506142d6565b602080825281016105698161485b565b601981526000602082017f4552433732313a20617070726f766520746f2063616c6c65720000000000000081529150614760565b60208082528101610569816148b6565b80820180821115610569576105696145ad565b6000614917825190565b61492581856020860161371c565b9290920192915050565b600061493b828561490d565b9150612c96828461490d565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b602082015291506142d6565b6020808252810161056981614947565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b602082015291506142d6565b6020808252810161056981614999565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526017016000614a1c828561490d565b7001034b99036b4b9b9b4b733903937b6329607d1b815291506011820161493b565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b602082015291506142d6565b6020808252810161056981614a3e565b818102808215838204851417614ab557614ab56145ad565b5092915050565b600081614acb57614acb6145ad565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000614760565b6020808252810161056981614ad3565b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526000614760565b6020808252810161056981614b15565b601c81526000602082017f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081529150614760565b6020808252810161056981614b57565b60808101614ba982876137c6565b614bb660208301866137c6565b614bc3604083018561382e565b8181036060830152614bd58184613740565b9695505050505050565b8051610569816136c1565b600060208284031215614bff57614bff600080fd5b6000612c968484614bdf56fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212209091e768c41e515b15cef78ea9c52da4af622d69b1dd1e8cf65136097a1e1b9a64736f6c63430008130033",
	"devdoc": {
		"events": {
			"Approval(address,address,uint256)": {
				"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
			},
			"ApprovalForAll(address,address,bool)": {
				"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
			},
			"BatchMetadataUpdate(uint256,uint256)": {
				"details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
			},
			"MetadataUpdate(uint256)": {
				"details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
			},
			"RoleAdminChanged(bytes32,bytes32,bytes32)": {
				"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
			},
			"RoleGranted(bytes32,address,address)": {
				"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
			},
			"RoleRevoked(bytes32,address,address)": {
				"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
			},
			"Transfer(address,address,uint256)": {
				"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
			}
		},
		"kind": "dev",
		"methods": {
			"approve(address,uint256)": {
				"details": "See {IERC721-approve}."
			},
			"balanceOf(address)": {
				"details": "See {IERC721-balanceOf}."
			},
			"getApproved(uint256)": {
				"details": "See {IERC721-getApproved}."
			},
			"getRoleAdmin(bytes32)": {
				"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
			},
			"grantRole(bytes32,address)": {
				"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
			},
			"hasRole(bytes32,address)": {
				"details": "Returns `true` if `account` has been granted `role`."
			},
			"isApprovedForAll(address,address)": {
				"details": "See {IERC721-isApprovedForAll}."
			},
			"name()": {
				"details": "See {IERC721Metadata-name}."
			},
			"ownerOf(uint256)": {
				"details": "See {IERC721-ownerOf}."
			},
			"renounceRole(bytes32,address)": {
				"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
			},
			"revokeRole(bytes32,address)": {
				"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
			},
			"setApprovalForAll(address,bool)": {
				"details": "See {IERC721-setApprovalForAll}."
			},
			"symbol()": {
				"details": "See {IERC721Metadata-symbol}."
			}
		},
		"title": "BIOrbit  NOTE: BIOrbit is a blockchain-based platform that enables monitoring and protection of Earth's natural resources  through satellite imagery and community engagement. Users can contribute to the platform by donating to monitor  protected areas and purchasing satellite images, ultimately fostering sustainable development and environmental conservation.",
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"storageLayout": {
		"storage": [
			{
				"astId": 507,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_name",
				"offset": 0,
				"slot": "0",
				"type": "t_string_storage"
			},
			{
				"astId": 509,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_symbol",
				"offset": 0,
				"slot": "1",
				"type": "t_string_storage"
			},
			{
				"astId": 513,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_owners",
				"offset": 0,
				"slot": "2",
				"type": "t_mapping(t_uint256,t_address)"
			},
			{
				"astId": 517,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_balances",
				"offset": 0,
				"slot": "3",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 521,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_tokenApprovals",
				"offset": 0,
				"slot": "4",
				"type": "t_mapping(t_uint256,t_address)"
			},
			{
				"astId": 527,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_operatorApprovals",
				"offset": 0,
				"slot": "5",
				"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
			},
			{
				"astId": 1558,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_tokenURIs",
				"offset": 0,
				"slot": "6",
				"type": "t_mapping(t_uint256,t_string_storage)"
			},
			{
				"astId": 24,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_roles",
				"offset": 0,
				"slot": "7",
				"type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
			},
			{
				"astId": 427,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_status",
				"offset": 0,
				"slot": "8",
				"type": "t_uint256"
			},
			{
				"astId": 3415,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "projectIdCounter",
				"offset": 0,
				"slot": "9",
				"type": "t_struct(Counter)2083_storage"
			},
			{
				"astId": 3469,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "Projects",
				"offset": 0,
				"slot": "10",
				"type": "t_mapping(t_uint256,t_struct(Project)3464_storage)"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_array(t_array(t_string_storage)dyn_storage)dyn_storage": {
				"base": "t_array(t_string_storage)dyn_storage",
				"encoding": "dynamic_array",
				"label": "string[][]",
				"numberOfBytes": "32"
			},
			"t_array(t_string_storage)dyn_storage": {
				"base": "t_string_storage",
				"encoding": "dynamic_array",
				"label": "string[]",
				"numberOfBytes": "32"
			},
			"t_array(t_struct(Monitoring)3425_storage)dyn_storage": {
				"base": "t_struct(Monitoring)3425_storage",
				"encoding": "dynamic_array",
				"label": "struct BIOrbit.Monitoring[]",
				"numberOfBytes": "32"
			},
			"t_bool": {
				"encoding": "inplace",
				"label": "bool",
				"numberOfBytes": "1"
			},
			"t_bytes32": {
				"encoding": "inplace",
				"label": "bytes32",
				"numberOfBytes": "32"
			},
			"t_contract(IERC721)1524": {
				"encoding": "inplace",
				"label": "contract IERC721",
				"numberOfBytes": "20"
			},
			"t_enum(State)3420": {
				"encoding": "inplace",
				"label": "enum BIOrbit.State",
				"numberOfBytes": "1"
			},
			"t_mapping(t_address,t_bool)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => bool)",
				"numberOfBytes": "32",
				"value": "t_bool"
			},
			"t_mapping(t_address,t_mapping(t_address,t_bool))": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => mapping(address => bool))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_bool)"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
				"encoding": "mapping",
				"key": "t_bytes32",
				"label": "mapping(bytes32 => struct AccessControl.RoleData)",
				"numberOfBytes": "32",
				"value": "t_struct(RoleData)19_storage"
			},
			"t_mapping(t_uint256,t_address)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => address)",
				"numberOfBytes": "32",
				"value": "t_address"
			},
			"t_mapping(t_uint256,t_string_storage)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => string)",
				"numberOfBytes": "32",
				"value": "t_string_storage"
			},
			"t_mapping(t_uint256,t_struct(Project)3464_storage)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => struct BIOrbit.Project)",
				"numberOfBytes": "32",
				"value": "t_struct(Project)3464_storage"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_struct(Counter)2083_storage": {
				"encoding": "inplace",
				"label": "struct Counters.Counter",
				"members": [
					{
						"astId": 2082,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "_value",
						"offset": 0,
						"slot": "0",
						"type": "t_uint256"
					}
				],
				"numberOfBytes": "32"
			},
			"t_struct(ImageTimeSeries)3432_storage": {
				"encoding": "inplace",
				"label": "struct BIOrbit.ImageTimeSeries",
				"members": [
					{
						"astId": 3428,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "detectionDate",
						"offset": 0,
						"slot": "0",
						"type": "t_array(t_string_storage)dyn_storage"
					},
					{
						"astId": 3431,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "forestCoverExtension",
						"offset": 0,
						"slot": "1",
						"type": "t_array(t_string_storage)dyn_storage"
					}
				],
				"numberOfBytes": "64"
			},
			"t_struct(Monitoring)3425_storage": {
				"encoding": "inplace",
				"label": "struct BIOrbit.Monitoring",
				"members": [
					{
						"astId": 3422,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "detectionDate",
						"offset": 0,
						"slot": "0",
						"type": "t_string_storage"
					},
					{
						"astId": 3424,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "forestCoverExtension",
						"offset": 0,
						"slot": "1",
						"type": "t_string_storage"
					}
				],
				"numberOfBytes": "64"
			},
			"t_struct(Project)3464_storage": {
				"encoding": "inplace",
				"label": "struct BIOrbit.Project",
				"members": [
					{
						"astId": 3434,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "id",
						"offset": 0,
						"slot": "0",
						"type": "t_uint256"
					},
					{
						"astId": 3436,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "uri",
						"offset": 0,
						"slot": "1",
						"type": "t_string_storage"
					},
					{
						"astId": 3439,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "nft",
						"offset": 0,
						"slot": "2",
						"type": "t_contract(IERC721)1524"
					},
					{
						"astId": 3442,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "state",
						"offset": 20,
						"slot": "2",
						"type": "t_enum(State)3420"
					},
					{
						"astId": 3444,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "name",
						"offset": 0,
						"slot": "3",
						"type": "t_string_storage"
					},
					{
						"astId": 3446,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "description",
						"offset": 0,
						"slot": "4",
						"type": "t_string_storage"
					},
					{
						"astId": 3448,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "extension",
						"offset": 0,
						"slot": "5",
						"type": "t_string_storage"
					},
					{
						"astId": 3452,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "footprint",
						"offset": 0,
						"slot": "6",
						"type": "t_array(t_array(t_string_storage)dyn_storage)dyn_storage"
					},
					{
						"astId": 3454,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "country",
						"offset": 0,
						"slot": "7",
						"type": "t_string_storage"
					},
					{
						"astId": 3456,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "owner",
						"offset": 0,
						"slot": "8",
						"type": "t_address"
					},
					{
						"astId": 3459,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "imageTimeSeries",
						"offset": 0,
						"slot": "9",
						"type": "t_struct(ImageTimeSeries)3432_storage"
					},
					{
						"astId": 3463,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "monitoring",
						"offset": 0,
						"slot": "11",
						"type": "t_array(t_struct(Monitoring)3425_storage)dyn_storage"
					}
				],
				"numberOfBytes": "384"
			},
			"t_struct(RoleData)19_storage": {
				"encoding": "inplace",
				"label": "struct AccessControl.RoleData",
				"members": [
					{
						"astId": 16,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "members",
						"offset": 0,
						"slot": "0",
						"type": "t_mapping(t_address,t_bool)"
					},
					{
						"astId": 18,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "adminRole",
						"offset": 0,
						"slot": "1",
						"type": "t_bytes32"
					}
				],
				"numberOfBytes": "64"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	}
}
