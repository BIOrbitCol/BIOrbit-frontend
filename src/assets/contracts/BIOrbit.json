{
	"address": "0xf6CedE4e73695F4D5037e4F8db3896a56772030f",
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_dataFeedsAddress",
					"type": "address"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "approved",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "ApprovalForAll",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "_fromTokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "_toTokenId",
					"type": "uint256"
				}
			],
			"name": "BatchMetadataUpdate",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "_tokenId",
					"type": "uint256"
				}
			],
			"name": "MetadataUpdate",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "id",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "enum BIOrbit.State",
					"name": "state",
					"type": "uint8"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "name",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "description",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "extension",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"internalType": "string[][]",
					"name": "footprint",
					"type": "string[][]"
				},
				{
					"indexed": false,
					"internalType": "bytes32",
					"name": "country",
					"type": "bytes32"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "bool",
					"name": "isRent",
					"type": "bool"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "rent",
					"type": "uint256"
				}
			],
			"name": "ProjectCreated",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"name": "Projects",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "id",
					"type": "uint256"
				},
				{
					"internalType": "string",
					"name": "uri",
					"type": "string"
				},
				{
					"internalType": "enum BIOrbit.State",
					"name": "state",
					"type": "uint8"
				},
				{
					"internalType": "bytes32",
					"name": "name",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "description",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "extension",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "country",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"components": [
						{
							"internalType": "string[]",
							"name": "detectionDate",
							"type": "string[]"
						},
						{
							"internalType": "string[]",
							"name": "forestCoverExtension",
							"type": "string[]"
						}
					],
					"internalType": "struct BIOrbit.ImageTimeSeries",
					"name": "imageTimeSeries",
					"type": "tuple"
				},
				{
					"internalType": "bool",
					"name": "isRent",
					"type": "bool"
				},
				{
					"internalType": "uint256",
					"name": "rentCost",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				}
			],
			"name": "burnProject",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getActiveRentingProjects",
			"outputs": [
				{
					"components": [
						{
							"internalType": "uint256",
							"name": "id",
							"type": "uint256"
						},
						{
							"internalType": "string",
							"name": "uri",
							"type": "string"
						},
						{
							"internalType": "enum BIOrbit.State",
							"name": "state",
							"type": "uint8"
						},
						{
							"internalType": "bytes32",
							"name": "name",
							"type": "bytes32"
						},
						{
							"internalType": "bytes32",
							"name": "description",
							"type": "bytes32"
						},
						{
							"internalType": "bytes32",
							"name": "extension",
							"type": "bytes32"
						},
						{
							"internalType": "string[][]",
							"name": "footprint",
							"type": "string[][]"
						},
						{
							"internalType": "bytes32",
							"name": "country",
							"type": "bytes32"
						},
						{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						},
						{
							"components": [
								{
									"internalType": "string[]",
									"name": "detectionDate",
									"type": "string[]"
								},
								{
									"internalType": "string[]",
									"name": "forestCoverExtension",
									"type": "string[]"
								}
							],
							"internalType": "struct BIOrbit.ImageTimeSeries",
							"name": "imageTimeSeries",
							"type": "tuple"
						},
						{
							"components": [
								{
									"internalType": "string",
									"name": "detectionDate",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "forestCoverExtension",
									"type": "string"
								}
							],
							"internalType": "struct BIOrbit.Monitoring[]",
							"name": "monitoring",
							"type": "tuple[]"
						},
						{
							"internalType": "bool",
							"name": "isRent",
							"type": "bool"
						},
						{
							"internalType": "uint256",
							"name": "rentCost",
							"type": "uint256"
						},
						{
							"components": [
								{
									"internalType": "address",
									"name": "renter",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								}
							],
							"internalType": "struct BIOrbit.RentInfo[]",
							"name": "rentInfo",
							"type": "tuple[]"
						}
					],
					"internalType": "struct BIOrbit.Project[]",
					"name": "",
					"type": "tuple[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "getApproved",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getLatestData",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getProjectsByOwner",
			"outputs": [
				{
					"components": [
						{
							"internalType": "uint256",
							"name": "id",
							"type": "uint256"
						},
						{
							"internalType": "string",
							"name": "uri",
							"type": "string"
						},
						{
							"internalType": "enum BIOrbit.State",
							"name": "state",
							"type": "uint8"
						},
						{
							"internalType": "bytes32",
							"name": "name",
							"type": "bytes32"
						},
						{
							"internalType": "bytes32",
							"name": "description",
							"type": "bytes32"
						},
						{
							"internalType": "bytes32",
							"name": "extension",
							"type": "bytes32"
						},
						{
							"internalType": "string[][]",
							"name": "footprint",
							"type": "string[][]"
						},
						{
							"internalType": "bytes32",
							"name": "country",
							"type": "bytes32"
						},
						{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						},
						{
							"components": [
								{
									"internalType": "string[]",
									"name": "detectionDate",
									"type": "string[]"
								},
								{
									"internalType": "string[]",
									"name": "forestCoverExtension",
									"type": "string[]"
								}
							],
							"internalType": "struct BIOrbit.ImageTimeSeries",
							"name": "imageTimeSeries",
							"type": "tuple"
						},
						{
							"components": [
								{
									"internalType": "string",
									"name": "detectionDate",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "forestCoverExtension",
									"type": "string"
								}
							],
							"internalType": "struct BIOrbit.Monitoring[]",
							"name": "monitoring",
							"type": "tuple[]"
						},
						{
							"internalType": "bool",
							"name": "isRent",
							"type": "bool"
						},
						{
							"internalType": "uint256",
							"name": "rentCost",
							"type": "uint256"
						},
						{
							"components": [
								{
									"internalType": "address",
									"name": "renter",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								}
							],
							"internalType": "struct BIOrbit.RentInfo[]",
							"name": "rentInfo",
							"type": "tuple[]"
						}
					],
					"internalType": "struct BIOrbit.Project[]",
					"name": "",
					"type": "tuple[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getProjectsNotOwnedWithoutRent",
			"outputs": [
				{
					"components": [
						{
							"internalType": "uint256",
							"name": "id",
							"type": "uint256"
						},
						{
							"internalType": "enum BIOrbit.State",
							"name": "state",
							"type": "uint8"
						},
						{
							"internalType": "bytes32",
							"name": "name",
							"type": "bytes32"
						},
						{
							"internalType": "bytes32",
							"name": "description",
							"type": "bytes32"
						},
						{
							"internalType": "bytes32",
							"name": "extension",
							"type": "bytes32"
						},
						{
							"internalType": "string[][]",
							"name": "footprint",
							"type": "string[][]"
						},
						{
							"internalType": "bytes32",
							"name": "country",
							"type": "bytes32"
						},
						{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						},
						{
							"internalType": "bool",
							"name": "isRent",
							"type": "bool"
						},
						{
							"internalType": "uint256",
							"name": "rentCost",
							"type": "uint256"
						}
					],
					"internalType": "struct BIOrbit.ProjectLite[]",
					"name": "",
					"type": "tuple[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				}
			],
			"name": "isApprovedForAll",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "_name",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "_description",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "_extension",
					"type": "bytes32"
				},
				{
					"internalType": "string[][]",
					"name": "_footprint",
					"type": "string[][]"
				},
				{
					"internalType": "bytes32",
					"name": "_country",
					"type": "bytes32"
				},
				{
					"internalType": "bool",
					"name": "_isRent",
					"type": "bool"
				}
			],
			"name": "mintProject",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "ownerOf",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "projectIdCounter",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "_value",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				}
			],
			"name": "rentProject",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "rentTime",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				},
				{
					"internalType": "bytes",
					"name": "_data",
					"type": "bytes"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "setApprovalForAll",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				},
				{
					"internalType": "bytes32",
					"name": "_description",
					"type": "bytes32"
				}
			],
			"name": "setDescription",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				}
			],
			"name": "setIsRent",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				},
				{
					"internalType": "bytes32",
					"name": "_name",
					"type": "bytes32"
				}
			],
			"name": "setName",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				}
			],
			"name": "setRentCost",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "string[]",
					"name": "_detectionDate",
					"type": "string[]"
				},
				{
					"internalType": "string[]",
					"name": "_forestCoverExtension",
					"type": "string[]"
				},
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				},
				{
					"internalType": "string",
					"name": "_projectURI",
					"type": "string"
				}
			],
			"name": "setTokenURI",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes4",
					"name": "interfaceId",
					"type": "bytes4"
				}
			],
			"name": "supportsInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				}
			],
			"name": "tokenURI",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_projectId",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	],
	"transactionHash": "0x890caa0df24248057b08301a11a02bba26ae67758890c8a101a5d0335b00467e",
	"receipt": {
		"to": null,
		"from": "0xE8e1543235e6C35C656ef0b28526C61571583f4B",
		"contractAddress": "0xf6CedE4e73695F4D5037e4F8db3896a56772030f",
		"transactionIndex": 1,
		"gasUsed": "5123213",
		"logsBloom": "0x
		"blockHash": "0xfca2b17af110d66a02f3e58a710c3dbfd42fcf383405e98a5d63df35a9c47866",
		"transactionHash": "0x890caa0df24248057b08301a11a02bba26ae67758890c8a101a5d0335b00467e",
		"logs": [
			{
				"transactionIndex": 1,
				"blockNumber": 36575295,
				"transactionHash": "0x890caa0df24248057b08301a11a02bba26ae67758890c8a101a5d0335b00467e",
				"address": "0x0000000000000000000000000000000000001010",
				"topics": [
					"0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
					"0x0000000000000000000000000000000000000000000000000000000000001010",
					"0x000000000000000000000000e8e1543235e6c35c656ef0b28526c61571583f4b",
					"0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
				],
				"data": "0x00000000000000000000000000000000000000000000000000b60359c8d9cb300000000000000000000000000000000000000000000000000dd63beb026aad07000000000000000000000000000000000000000000001ff240d4f7f9d3f4a87d0000000000000000000000000000000000000000000000000d2038913990e1d7000000000000000000000000000000000000000000001ff2418afb539cce73ad",
				"logIndex": 7,
				"blockHash": "0xfca2b17af110d66a02f3e58a710c3dbfd42fcf383405e98a5d63df35a9c47866"
			}
		],
		"blockNumber": 36575295,
		"cumulativeGasUsed": "5530263",
		"status": 1,
		"byzantium": true
	},
	"args": ["0xbAFe2c5C2f5e39479884C8Ff5bDdEd055Fd0e85c"],
	"numDeployments": 2,
	"solcInputHash": "ed55f442c77401da1dbac0b0474139e7",
	"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataFeedsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BIOrbit.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"description\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"extension\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string[][]\",\"name\":\"footprint\",\"type\":\"string[][]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"country\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRent\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rent\",\"type\":\"uint256\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Projects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"enum BIOrbit.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"description\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"extension\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"country\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string[]\",\"name\":\"detectionDate\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"forestCoverExtension\",\"type\":\"string[]\"}],\"internalType\":\"struct BIOrbit.ImageTimeSeries\",\"name\":\"imageTimeSeries\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isRent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rentCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"burnProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveRentingProjects\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"enum BIOrbit.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"description\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"extension\",\"type\":\"bytes32\"},{\"internalType\":\"string[][]\",\"name\":\"footprint\",\"type\":\"string[][]\"},{\"internalType\":\"bytes32\",\"name\":\"country\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string[]\",\"name\":\"detectionDate\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"forestCoverExtension\",\"type\":\"string[]\"}],\"internalType\":\"struct BIOrbit.ImageTimeSeries\",\"name\":\"imageTimeSeries\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"detectionDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"forestCoverExtension\",\"type\":\"string\"}],\"internalType\":\"struct BIOrbit.Monitoring[]\",\"name\":\"monitoring\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isRent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rentCost\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct BIOrbit.RentInfo[]\",\"name\":\"rentInfo\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BIOrbit.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectsByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"enum BIOrbit.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"description\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"extension\",\"type\":\"bytes32\"},{\"internalType\":\"string[][]\",\"name\":\"footprint\",\"type\":\"string[][]\"},{\"internalType\":\"bytes32\",\"name\":\"country\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string[]\",\"name\":\"detectionDate\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"forestCoverExtension\",\"type\":\"string[]\"}],\"internalType\":\"struct BIOrbit.ImageTimeSeries\",\"name\":\"imageTimeSeries\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"detectionDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"forestCoverExtension\",\"type\":\"string\"}],\"internalType\":\"struct BIOrbit.Monitoring[]\",\"name\":\"monitoring\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isRent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rentCost\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct BIOrbit.RentInfo[]\",\"name\":\"rentInfo\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BIOrbit.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectsNotOwnedWithoutRent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum BIOrbit.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"description\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"extension\",\"type\":\"bytes32\"},{\"internalType\":\"string[][]\",\"name\":\"footprint\",\"type\":\"string[][]\"},{\"internalType\":\"bytes32\",\"name\":\"country\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rentCost\",\"type\":\"uint256\"}],\"internalType\":\"struct BIOrbit.ProjectLite[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_description\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_extension\",\"type\":\"bytes32\"},{\"internalType\":\"string[][]\",\"name\":\"_footprint\",\"type\":\"string[][]\"},{\"internalType\":\"bytes32\",\"name\":\"_country\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isRent\",\"type\":\"bool\"}],\"name\":\"mintProject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"rentProject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_description\",\"type\":\"bytes32\"}],\"name\":\"setDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"setIsRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"setRentCost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_detectionDate\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_forestCoverExtension\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BIOrbit.sol\":\"BIOrbit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/BIOrbit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\n/**\\n *  @title BIOrbit\\n *\\n *  NOTE: BIOrbit is a blockchain-based platform that enables monitoring and protection of Earth's natural resources\\n *  through satellite imagery and community engagement. Users can contribute to the platform by donating to monitor\\n *  protected areas and purchasing satellite images, ultimately fostering sustainable development and environmental conservation.\\n *\\n */\\n\\ninterface DataFeedsInterface {\\n\\tfunction getLatestData() external view returns (int);\\n}\\n\\ncontract BIOrbit is ERC721, ERC721URIStorage {\\n\\tusing Counters for Counters.Counter;\\n\\n\\tCounters.Counter public projectIdCounter;\\n\\n\\t/* Constants and immutable */\\n\\n\\taddress dataFeedsAddress;\\n\\tuint256 public rentTime = 30 days;\\n\\n\\t/* Enumerables */\\n\\n\\tenum State {\\n\\t\\tActive,\\n\\t\\tMonitor,\\n\\t\\tPaused,\\n\\t\\tInactive\\n\\t}\\n\\n\\t/* Struct */\\n\\n\\tstruct RentInfo {\\n\\t\\taddress renter;\\n\\t\\tuint256 expiry;\\n\\t}\\n\\n\\tstruct Monitoring {\\n\\t\\t// Monitoring\\n\\t\\tstring detectionDate;\\n\\t\\tstring forestCoverExtension;\\n\\t}\\n\\n\\tstruct ImageTimeSeries {\\n\\t\\t// analysis of image time series\\n\\t\\tstring[] detectionDate;\\n\\t\\tstring[] forestCoverExtension;\\n\\t}\\n\\n\\tstruct Project {\\n\\t\\tuint256 id;\\n\\t\\tstring uri;\\n\\t\\tState state;\\n\\t\\tbytes32 name;\\n\\t\\tbytes32 description;\\n\\t\\tbytes32 extension;\\n\\t\\tstring[][] footprint;\\n\\t\\tbytes32 country;\\n\\t\\taddress owner;\\n\\t\\tImageTimeSeries imageTimeSeries;\\n\\t\\tMonitoring[] monitoring;\\n\\t\\tbool isRent;\\n\\t\\tuint256 rentCost;\\n\\t\\tRentInfo[] rentInfo;\\n\\t}\\n\\n\\tstruct ProjectLite {\\n\\t\\tuint256 id;\\n\\t\\tState state;\\n\\t\\tbytes32 name;\\n\\t\\tbytes32 description;\\n\\t\\tbytes32 extension;\\n\\t\\tstring[][] footprint;\\n\\t\\tbytes32 country;\\n\\t\\taddress owner;\\n\\t\\tbool isRent;\\n\\t\\tuint256 rentCost;\\n\\t}\\n\\n\\t/* Storage */\\n\\n\\tmapping(uint256 => Project) public Projects;\\n\\n\\t/* Events */\\n\\n\\tevent ProjectCreated(\\n\\t\\tuint256 id,\\n\\t\\tState state,\\n\\t\\tbytes32 name,\\n\\t\\tbytes32 description,\\n\\t\\tbytes32 extension,\\n\\t\\tstring[][] footprint,\\n\\t\\tbytes32 country,\\n\\t\\taddress owner,\\n\\t\\tbool isRent,\\n\\t\\tuint256 rent\\n\\t);\\n\\n\\tconstructor(address _dataFeedsAddress) ERC721('BIOrbit', 'BIO') {\\n\\t\\tdataFeedsAddress = _dataFeedsAddress;\\n\\t}\\n\\n\\tfunction mintProject(\\n\\t\\tbytes32 _name,\\n\\t\\tbytes32 _description,\\n\\t\\tbytes32 _extension,\\n\\t\\tstring[][] memory _footprint,\\n\\t\\tbytes32 _country,\\n\\t\\tbool _isRent\\n\\t) external payable {\\n\\t\\tprojectIdCounter.increment();\\n\\t\\tuint256 projectId = projectIdCounter.current();\\n\\n\\t\\tProject storage newProject = Projects[projectId];\\n\\n\\t\\tuint256 rentCost = msg.value / 10;\\n\\n\\t\\tnewProject.id = projectId;\\n\\t\\tnewProject.state = State.Monitor;\\n\\t\\tnewProject.name = _name;\\n\\t\\tnewProject.description = _description;\\n\\t\\tnewProject.extension = _extension;\\n\\t\\tnewProject.footprint = _footprint;\\n\\t\\tnewProject.country = _country;\\n\\t\\tnewProject.owner = msg.sender;\\n\\t\\tnewProject.isRent = _isRent;\\n\\t\\tnewProject.rentCost = rentCost;\\n\\n\\t\\t_safeMint(msg.sender, projectId);\\n\\n\\t\\temit ProjectCreated(\\n\\t\\t\\tnewProject.id,\\n\\t\\t\\tnewProject.state,\\n\\t\\t\\tnewProject.name,\\n\\t\\t\\tnewProject.description,\\n\\t\\t\\tnewProject.extension,\\n\\t\\t\\tnewProject.footprint,\\n\\t\\t\\tnewProject.country,\\n\\t\\t\\tnewProject.owner,\\n\\t\\t\\tnewProject.isRent,\\n\\t\\t\\tnewProject.rentCost\\n\\t\\t);\\n\\t}\\n\\n\\tfunction rentProject(uint256 _projectId) external payable {\\n\\t\\tProject storage project = Projects[_projectId];\\n\\n\\t\\trequire(project.owner != msg.sender, \\\"You can't rent your own project\\\");\\n\\t\\trequire(project.state == State.Active, 'Project is not active');\\n\\t\\trequire(project.isRent, \\\"Project isn't for rent\\\");\\n\\t\\trequire(project.rentCost == msg.value, 'Rent price is incorrect');\\n\\n\\t\\tRentInfo memory newRentInfo = RentInfo({\\n\\t\\t\\trenter: msg.sender,\\n\\t\\t\\texpiry: block.timestamp + rentTime\\n\\t\\t});\\n\\n\\t\\tproject.rentInfo.push(newRentInfo);\\n\\n\\t\\tpayable(project.owner).transfer(msg.value);\\n\\t}\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 _projectId\\n\\t) public override(ERC721, IERC721) {\\n\\t\\tsuper.safeTransferFrom(from, to, _projectId);\\n\\n\\t\\t// Update the owner of the project\\n\\t\\tProject storage project = Projects[_projectId];\\n\\t\\tproject.owner = to;\\n\\t}\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 _projectId,\\n\\t\\tbytes memory _data\\n\\t) public override(ERC721, IERC721) {\\n\\t\\tsuper.safeTransferFrom(from, to, _projectId, _data);\\n\\n\\t\\t// Update the owner of the project\\n\\t\\tProject storage project = Projects[_projectId];\\n\\t\\tproject.owner = to;\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 _projectId\\n\\t) public override(ERC721, IERC721) {\\n\\t\\tsuper.transferFrom(from, to, _projectId);\\n\\n\\t\\t// Update the owner of the project\\n\\t\\tProject storage project = Projects[_projectId];\\n\\t\\tproject.owner = to;\\n\\t}\\n\\n\\tfunction setTokenURI(\\n\\t\\tstring[] memory _detectionDate,\\n\\t\\tstring[] memory _forestCoverExtension,\\n\\t\\tuint256 _projectId,\\n\\t\\tstring memory _projectURI\\n\\t) public {\\n\\t\\tProject storage project = Projects[_projectId];\\n\\n\\t\\tif (project.state == State.Active) {\\n\\t\\t\\t_setTokenURI(_projectId, _projectURI);\\n\\n\\t\\t\\tMonitoring memory monitoring = Monitoring(\\n\\t\\t\\t\\t_detectionDate[0],\\n\\t\\t\\t\\t_forestCoverExtension[0]\\n\\t\\t\\t);\\n\\n\\t\\t\\tproject.monitoring.push(monitoring);\\n\\t\\t\\tproject.uri = _projectURI;\\n\\t\\t}\\n\\n\\t\\tif (project.state == State.Monitor) {\\n\\t\\t\\t_setTokenURI(_projectId, _projectURI);\\n\\n\\t\\t\\tImageTimeSeries memory imageTimeSeries = ImageTimeSeries(\\n\\t\\t\\t\\t_detectionDate,\\n\\t\\t\\t\\t_forestCoverExtension\\n\\t\\t\\t);\\n\\t\\t\\tproject.imageTimeSeries = imageTimeSeries;\\n\\t\\t\\tproject.state = State.Active;\\n\\t\\t\\tproject.uri = _projectURI;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction tokenURI(\\n\\t\\tuint256 _projectId\\n\\t) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n\\t\\tProject memory project = Projects[_projectId];\\n\\t\\trequire(project.owner == msg.sender, 'Access denied');\\n\\n\\t\\treturn super.tokenURI(_projectId);\\n\\t}\\n\\n\\tfunction burnProject(uint256 _projectId) public {\\n\\t\\tProject memory project = Projects[_projectId];\\n\\t\\trequire(project.owner == msg.sender, 'You can only burn your own projects');\\n\\n\\t\\tbool hasActiveRenters = false;\\n\\n\\t\\tfor (uint256 i = 0; i < project.rentInfo.length; i++) {\\n\\t\\t\\tif (project.rentInfo[i].expiry > block.timestamp) {\\n\\t\\t\\t\\thasActiveRenters = true;\\n\\t\\t\\t\\tuint256 rentAmount = project.rentCost;\\n\\t\\t\\t\\tpayable(project.rentInfo[i].renter).transfer(rentAmount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!hasActiveRenters) {\\n\\t\\t\\t_burn(_projectId);\\n\\t\\t\\tdelete Projects[project.id];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t) public view override(ERC721, ERC721URIStorage) returns (bool) {\\n\\t\\treturn super.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t// ************************************ //\\n\\t// *        Getters & Setters         * //\\n\\t// ************************************ //\\n\\n\\tfunction getProjectsByOwner() public view returns (Project[] memory) {\\n\\t\\tuint256 projectCount = projectIdCounter.current();\\n\\n\\t\\tif (projectCount == 0) {\\n\\t\\t\\treturn new Project[](0);\\n\\t\\t}\\n\\n\\t\\tProject[] memory ownedProjects = new Project[](projectCount);\\n\\t\\tuint256 ownedProjectsCount = 0;\\n\\n\\t\\tfor (uint256 i = 1; i <= projectCount; i++) {\\n\\t\\t\\tProject storage project = Projects[i];\\n\\t\\t\\tif (project.owner == msg.sender) {\\n\\t\\t\\t\\townedProjects[ownedProjectsCount] = project;\\n\\t\\t\\t\\townedProjectsCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Resize the array to remove any unused slots\\n\\t\\tassembly {\\n\\t\\t\\tmstore(ownedProjects, ownedProjectsCount)\\n\\t\\t}\\n\\n\\t\\treturn ownedProjects;\\n\\t}\\n\\n\\tfunction getActiveRentingProjects() public view returns (Project[] memory) {\\n\\t\\tuint256 projectCount = projectIdCounter.current();\\n\\n\\t\\tif (projectCount == 0) {\\n\\t\\t\\treturn new Project[](0);\\n\\t\\t}\\n\\n\\t\\tProject[] memory activeRentingProjects = new Project[](projectCount);\\n\\t\\tuint256 activeRentingProjectsCount = 0;\\n\\n\\t\\tfor (uint256 i = 1; i <= projectCount; i++) {\\n\\t\\t\\tProject memory project = Projects[i];\\n\\t\\t\\tfor (uint256 j = 0; j < project.rentInfo.length; j++) {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tproject.rentInfo[j].renter == msg.sender &&\\n\\t\\t\\t\\t\\tproject.rentInfo[j].expiry > block.timestamp\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tactiveRentingProjects[activeRentingProjectsCount] = project;\\n\\t\\t\\t\\t\\tactiveRentingProjectsCount++;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Resize the array to remove any unused slots\\n\\t\\tassembly {\\n\\t\\t\\tmstore(activeRentingProjects, activeRentingProjectsCount)\\n\\t\\t}\\n\\n\\t\\treturn activeRentingProjects;\\n\\t}\\n\\n\\tfunction getProjectsNotOwnedWithoutRent()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (ProjectLite[] memory)\\n\\t{\\n\\t\\tuint256 projectCount = projectIdCounter.current();\\n\\n\\t\\tif (projectCount == 0) {\\n\\t\\t\\treturn new ProjectLite[](0);\\n\\t\\t}\\n\\n\\t\\tProjectLite[] memory notOwnedProjects = new ProjectLite[](projectCount);\\n\\t\\tuint256 notOwnedProjectsCount = 0;\\n\\n\\t\\tfor (uint256 i = 1; i <= projectCount; i++) {\\n\\t\\t\\tProject memory project = Projects[i];\\n\\t\\t\\tbool isOwned = project.owner == msg.sender;\\n\\t\\t\\tbool hasActiveRenters = false;\\n\\n\\t\\t\\tfor (uint256 j = 0; j < project.rentInfo.length; j++) {\\n\\t\\t\\t\\tif (project.rentInfo[j].expiry > block.timestamp) {\\n\\t\\t\\t\\t\\thasActiveRenters = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!isOwned && !hasActiveRenters) {\\n\\t\\t\\t\\tProjectLite memory projectLite = ProjectLite({\\n\\t\\t\\t\\t\\tid: project.id,\\n\\t\\t\\t\\t\\tstate: project.state,\\n\\t\\t\\t\\t\\tname: project.name,\\n\\t\\t\\t\\t\\tdescription: project.description,\\n\\t\\t\\t\\t\\textension: project.extension,\\n\\t\\t\\t\\t\\tfootprint: project.footprint,\\n\\t\\t\\t\\t\\tcountry: project.country,\\n\\t\\t\\t\\t\\towner: project.owner,\\n\\t\\t\\t\\t\\tisRent: project.isRent,\\n\\t\\t\\t\\t\\trentCost: project.rentCost\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tnotOwnedProjects[notOwnedProjectsCount] = projectLite;\\n\\t\\t\\t\\tnotOwnedProjectsCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Resize the array to remove any unused slots\\n\\t\\tassembly {\\n\\t\\t\\tmstore(notOwnedProjects, notOwnedProjectsCount)\\n\\t\\t}\\n\\n\\t\\treturn notOwnedProjects;\\n\\t}\\n\\n\\tfunction getLatestData() public view returns (uint256) {\\n\\t\\treturn uint256(DataFeedsInterface(dataFeedsAddress).getLatestData());\\n\\t}\\n\\n\\tfunction setName(uint256 _projectId, bytes32 _name) public {\\n\\t\\tProject storage project = Projects[_projectId];\\n\\t\\trequire(project.owner == msg.sender, 'Access denied');\\n\\n\\t\\tproject.name = _name;\\n\\t}\\n\\n\\tfunction setDescription(uint256 _projectId, bytes32 _description) public {\\n\\t\\tProject storage project = Projects[_projectId];\\n\\t\\trequire(project.owner == msg.sender, 'Access denied');\\n\\n\\t\\tproject.description = _description;\\n\\t}\\n\\n\\tfunction setIsRent(uint256 _projectId) public {\\n\\t\\tProject storage project = Projects[_projectId];\\n\\t\\trequire(project.owner == msg.sender, 'Access denied');\\n\\n\\t\\tif (!project.isRent) {\\n\\t\\t\\tproject.isRent = true;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tproject.isRent = false;\\n\\t}\\n\\n\\tfunction setRentCost(uint256 _projectId) public payable {\\n\\t\\tProject storage project = Projects[_projectId];\\n\\t\\trequire(project.owner == msg.sender, 'Access denied');\\n\\n\\t\\tproject.rentCost = getLatestData();\\n\\t}\\n\\n\\t// ************************************ //\\n\\t// *        Helpers functions         * //\\n\\t// ************************************ //\\n\\n\\tfunction concatenateArrays(\\n\\t\\tstring[] memory a,\\n\\t\\tstring[] memory b\\n\\t) private pure returns (string[] memory) {\\n\\t\\tstring[] memory result = new string[](a.length + b.length);\\n\\t\\tuint256 i;\\n\\t\\tfor (i = 0; i < a.length; i++) {\\n\\t\\t\\tresult[i] = a[i];\\n\\t\\t}\\n\\t\\tfor (uint256 j = 0; j < b.length; j++) {\\n\\t\\t\\tresult[i++] = b[j];\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t// *********************************** //\\n\\t// *        Private functions         * //\\n\\t// *********************************** //\\n\\n\\tfunction _burn(\\n\\t\\tuint256 _projectId\\n\\t) internal override(ERC721, ERC721URIStorage) {\\n\\t\\tsuper._burn(_projectId);\\n\\t}\\n}\\n\",\"keccak256\":\"0xeaa80641ecffba10f9f3db62fd5b93a2c85569858c710e8fd535d4d63bd61c23\",\"license\":\"MIT\"}},\"version\":1}",
	"bytecode": "0x608060405262278d006009553480156200001857600080fd5b5060405162005cfe38038062005cfe8339810160408190526200003b91620000fb565b60405180604001604052806007815260200166109253dc989a5d60ca1b8152506040518060400160405280600381526020016242494f60e81b81525081600090816200008891906200023b565b5060016200009782826200023b565b5050600880546001600160a01b0319166001600160a01b039390931692909217909155506200030b565b60006001600160a01b0382165b92915050565b620000df81620000c1565b8114620000eb57600080fd5b50565b8051620000ce81620000d4565b600060208284031215620001125762000112600080fd5b6000620001208484620000ee565b949350505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200016957607f821691505b6020821081036200017e576200017e6200013e565b50919050565b6000620000ce620001928381565b90565b620001a08362000184565b81546008840282811b60001990911b908116901990911617825550505050565b6000620001cf81848462000195565b505050565b81811015620001f357620001ea600082620001c0565b600101620001d4565b5050565b601f821115620001cf576000818152602090206020601f85010481016020851015620002205750805b620002346020601f860104830182620001d4565b5050505050565b81516001600160401b0381111562000257576200025762000128565b62000263825462000154565b62000270828285620001f7565b6020601f831160018114620002a757600084156200028e5750858201515b600019600886021c198116600286021786555062000303565b600085815260208120601f198616915b82811015620002d95788850151825560209485019460019092019101620002b7565b86831015620002f65784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b6159e3806200031b6000396000f3fe6080604052600436106101b75760003560e01c8063a12396aa116100ec578063c87b56dd1161008a578063e985e9c511610064578063e985e9c5146104bd578063f7353dc7146104dd578063f7e33aa8146104fd578063f87cf6bc1461051d57600080fd5b8063c87b56dd14610470578063d5977b5e14610490578063e3bbfd3f146104a757600080fd5b8063b88d4fde116100c6578063b88d4fde146103fb578063bdf697cb1461041b578063bea1fc451461043b578063c5b4f1981461045d57600080fd5b8063a12396aa146103a6578063a22cb465146103c6578063ab757d61146103e657600080fd5b806342842e0e116101595780636352211e116101335780636352211e1461033157806370a082311461035157806395d89b411461037e578063979529821461039357600080fd5b806342842e0e146102dc5780634aae5f4d146102fc57806359886b821461031157600080fd5b8063095ea7b311610195578063095ea7b3146102415780631455720b1461026357806321b2416c1461028557806323b872dd146102bc57600080fd5b806301ffc9a7146101bc57806306fdde03146101f2578063081812fc14610214575b600080fd5b3480156101c857600080fd5b506101dc6101d736600461432c565b610530565b6040516101e99190614357565b60405180910390f35b3480156101fe57600080fd5b50610207610541565b6040516101e991906143bb565b34801561022057600080fd5b5061023461022f3660046143dd565b6105d3565b6040516101e99190614418565b34801561024d57600080fd5b5061026161025c36600461443a565b6105fa565b005b34801561026f57600080fd5b50610278610688565b6040516101e9919061488e565b34801561029157600080fd5b506102a56102a03660046143dd565b610e43565b6040516101e99b9a9998979695949392919061489f565b3480156102c857600080fd5b506102616102d7366004614951565b6110e9565b3480156102e857600080fd5b506102616102f7366004614951565b611126565b34801561030857600080fd5b50610278611131565b34801561031d57600080fd5b5061026161032c366004614b4b565b61185d565b34801561033d57600080fd5b5061023461034c3660046143dd565b6119d1565b34801561035d57600080fd5b5061037161036c366004614bfc565b611a06565b6040516101e99190614c1d565b34801561038a57600080fd5b50610207611a4a565b6102616103a13660046143dd565b611a59565b3480156103b257600080fd5b506102616103c1366004614c2b565b611aa4565b3480156103d257600080fd5b506102616103e1366004614c60565b611ae5565b3480156103f257600080fd5b50610371611af4565b34801561040757600080fd5b50610261610416366004614c93565b611b67565b34801561042757600080fd5b506102616104363660046143dd565b611ba6565b34801561044757600080fd5b50610450611c0b565b6040516101e99190614df9565b61026161046b3660046143dd565b612439565b34801561047c57600080fd5b5061020761048b3660046143dd565b61259d565b34801561049c57600080fd5b506007546103719081565b3480156104b357600080fd5b5061037160095481565b3480156104c957600080fd5b506101dc6104d8366004614e0a565b612c04565b3480156104e957600080fd5b506102616104f83660046143dd565b612c32565b34801561050957600080fd5b50610261610518366004614c2b565b613412565b61026161052b366004614ece565b613453565b600061053b8261359a565b92915050565b60606000805461055090614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461057c90614f88565b80156105c95780601f1061059e576101008083540402835291602001916105c9565b820191906000526020600020905b8154815290600101906020018083116105ac57829003601f168201915b5050505050905090565b60006105de826135bf565b506000908152600460205260409020546001600160a01b031690565b6000610605826119d1565b9050806001600160a01b0316836001600160a01b0316036106415760405162461bcd60e51b815260040161063890614ff5565b60405180910390fd5b336001600160a01b038216148061065d575061065d8133612c04565b6106795760405162461bcd60e51b81526004016106389061505f565b61068383836135f6565b505050565b6060600061069560075490565b9050806000036106d75760408051600080825260208201909252906106d0565b6106bd61402a565b8152602001906001900390816106b55790505b5091505090565b6000816001600160401b038111156106f1576106f16149a1565b60405190808252806020026020018201604052801561072a57816020015b61071761402a565b81526020019060019003908161070f5790505b509050600060015b838111610e3a576000600a6000838152602001908152602001600020604051806101c00160405290816000820154815260200160018201805461077490614f88565b80601f01602080910402602001604051908101604052809291908181526020018280546107a090614f88565b80156107ed5780601f106107c2576101008083540402835291602001916107ed565b820191906000526020600020905b8154815290600101906020018083116107d057829003601f168201915b5050509183525050600282015460209091019060ff1660038111156108145761081461447d565b60038111156108255761082561447d565b815260200160038201548152602001600482015481526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020016000905b8282101561095f57838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b8282101561094c5783829060005260206000200180546108bf90614f88565b80601f01602080910402602001604051908101604052809291908181526020018280546108eb90614f88565b80156109385780601f1061090d57610100808354040283529160200191610938565b820191906000526020600020905b81548152906001019060200180831161091b57829003601f168201915b5050505050815260200190600101906108a0565b505050508152602001906001019061086c565b50505090825250600782015460208083019190915260088301546001600160a01b031660408084019190915280516009850180549384028201606090810184529282018481529483019491939092849291849160009085015b82821015610a645783829060005260206000200180546109d790614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0390614f88565b8015610a505780601f10610a2557610100808354040283529160200191610a50565b820191906000526020600020905b815481529060010190602001808311610a3357829003601f168201915b5050505050815260200190600101906109b8565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015610b3d578382906000526020600020018054610ab090614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054610adc90614f88565b8015610b295780601f10610afe57610100808354040283529160200191610b29565b820191906000526020600020905b815481529060010190602001808311610b0c57829003601f168201915b505050505081526020019060010190610a91565b50505050815250508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b82821015610cc45783829060005260206000209060020201604051806040016040529081600082018054610ba190614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054610bcd90614f88565b8015610c1a5780601f10610bef57610100808354040283529160200191610c1a565b820191906000526020600020905b815481529060010190602001808311610bfd57829003601f168201915b50505050508152602001600182018054610c3390614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5f90614f88565b8015610cac5780601f10610c8157610100808354040283529160200191610cac565b820191906000526020600020905b815481529060010190602001808311610c8f57829003601f168201915b50505050508152505081526020019060010190610b6e565b505050508152602001600c820160009054906101000a900460ff16151515158152602001600d8201548152602001600e8201805480602002602001604051908101604052809291908181526020016000905b82821015610d5e576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610d16565b5050505081525050905060005b816101a0015151811015610e2557336001600160a01b0316826101a001518281518110610d9a57610d9a61506f565b6020026020010151600001516001600160a01b0316148015610ddd575042826101a001518281518110610dcf57610dcf61506f565b602002602001015160200151115b15610e135781858581518110610df557610df561506f565b60200260200101819052508380610e0b9061509b565b945050610e25565b80610e1d8161509b565b915050610d6b565b50508080610e329061509b565b915050610732565b50815292915050565b600a6020526000908152604090208054600182018054919291610e6590614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9190614f88565b8015610ede5780601f10610eb357610100808354040283529160200191610ede565b820191906000526020600020905b815481529060010190602001808311610ec157829003601f168201915b505050506002830154600384015460048501546005860154600787015460088801546040805160098b0180546060602082028401810185529383018181529b9c60ff909a169b989a509698959794966001600160a01b03909416959491939092849291849160009085015b82821015610ff5578382906000526020600020018054610f6890614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9490614f88565b8015610fe15780601f10610fb657610100808354040283529160200191610fe1565b820191906000526020600020905b815481529060010190602001808311610fc457829003601f168201915b505050505081526020019060010190610f49565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156110ce57838290600052602060002001805461104190614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461106d90614f88565b80156110ba5780601f1061108f576101008083540402835291602001916110ba565b820191906000526020600020905b81548152906001019060200180831161109d57829003601f168201915b505050505081526020019060010190611022565b50505091525050600c820154600d90920154909160ff16908b565b6110f4838383613664565b6000908152600a6020526040902060080180546001600160a01b0319166001600160a01b039290921691909117905550565b6110f4838383613695565b6060600061113e60075490565b90508060000361117f5760408051600080825260208201909252906106d0565b61116661402a565b81526020019060019003908161115e5790505091505090565b6000816001600160401b03811115611199576111996149a1565b6040519080825280602002602001820160405280156111d257816020015b6111bf61402a565b8152602001906001900390816111b75790505b509050600060015b838111610e3a576000818152600a602052604090206008810154336001600160a01b039091160361184a5780604051806101c00160405290816000820154815260200160018201805461122c90614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461125890614f88565b80156112a55780601f1061127a576101008083540402835291602001916112a5565b820191906000526020600020905b81548152906001019060200180831161128857829003601f168201915b5050509183525050600282015460209091019060ff1660038111156112cc576112cc61447d565b60038111156112dd576112dd61447d565b815260200160038201548152602001600482015481526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020016000905b8282101561141757838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b8282101561140457838290600052602060002001805461137790614f88565b80601f01602080910402602001604051908101604052809291908181526020018280546113a390614f88565b80156113f05780601f106113c5576101008083540402835291602001916113f0565b820191906000526020600020905b8154815290600101906020018083116113d357829003601f168201915b505050505081526020019060010190611358565b5050505081526020019060010190611324565b50505090825250600782015460208083019190915260088301546001600160a01b031660408084019190915280516009850180549384028201606090810184529282018481529483019491939092849291849160009085015b8282101561151c57838290600052602060002001805461148f90614f88565b80601f01602080910402602001604051908101604052809291908181526020018280546114bb90614f88565b80156115085780601f106114dd57610100808354040283529160200191611508565b820191906000526020600020905b8154815290600101906020018083116114eb57829003601f168201915b505050505081526020019060010190611470565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156115f557838290600052602060002001805461156890614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461159490614f88565b80156115e15780601f106115b6576101008083540402835291602001916115e1565b820191906000526020600020905b8154815290600101906020018083116115c457829003601f168201915b505050505081526020019060010190611549565b50505050815250508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b8282101561177c578382906000526020600020906002020160405180604001604052908160008201805461165990614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461168590614f88565b80156116d25780601f106116a7576101008083540402835291602001916116d2565b820191906000526020600020905b8154815290600101906020018083116116b557829003601f168201915b505050505081526020016001820180546116eb90614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461171790614f88565b80156117645780601f1061173957610100808354040283529160200191611764565b820191906000526020600020905b81548152906001019060200180831161174757829003601f168201915b50505050508152505081526020019060010190611626565b505050508152602001600c820160009054906101000a900460ff16151515158152602001600d8201548152602001600e8201805480602002602001604051908101604052809291908181526020016000905b82821015611816576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001908101548284015290835290920191016117ce565b50505050815250508484815181106118305761183061506f565b602002602001018190525082806118469061509b565b9350505b50806118558161509b565b9150506111da565b6000828152600a6020526040812090600282015460ff1660038111156118855761188561447d565b0361193a5761189483836136b0565b60006040518060400160405280876000815181106118b4576118b461506f565b60200260200101518152602001866000815181106118d4576118d461506f565b602090810291909101810151909152600b84018054600181018255600091825291902082519293508392600290920201908190611911908261514e565b5060208201516001820190611926908261514e565b50505060018201611937848261514e565b50505b6001600282015460ff1660038111156119555761195561447d565b036119ca5761196483836136b0565b604080518082019091528581526020808201869052865182916009850191611991918391908b01906140af565b5060208281015180516119aa92600185019201906140af565b50505060028201805460ff19169055600182016119c7848261514e565b50505b5050505050565b6000818152600260205260408120546001600160a01b03168061053b5760405162461bcd60e51b815260040161063890615248565b60006001600160a01b038216611a2e5760405162461bcd60e51b81526004016106389061529e565b506001600160a01b031660009081526003602052604090205490565b60606001805461055090614f88565b6000818152600a6020526040902060088101546001600160a01b03163314611a935760405162461bcd60e51b8152600401610638906152d2565b611a9b611af4565b600d9091015550565b6000828152600a6020526040902060088101546001600160a01b03163314611ade5760405162461bcd60e51b8152600401610638906152d2565b6003015550565b611af0338383613738565b5050565b6008546040805163ab757d6160e01b815290516000926001600160a01b03169163ab757d619160048083019260209291908290030181865afa158015611b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6291906152ed565b905090565b611b73848484846137da565b506000908152600a6020526040902060080180546001600160a01b0319166001600160a01b039290921691909117905550565b6000818152600a6020526040902060088101546001600160a01b03163314611be05760405162461bcd60e51b8152600401610638906152d2565b600c81015460ff16611bfd57600c01805460ff1916600117905550565b600c01805460ff1916905550565b60606000611c1860075490565b905080600003611c595760408051600080825260208201909252906106d0565b611c40614105565b815260200190600190039081611c385790505091505090565b6000816001600160401b03811115611c7357611c736149a1565b604051908082528060200260200182016040528015611cac57816020015b611c99614105565b815260200190600190039081611c915790505b509050600060015b838111610e3a576000600a6000838152602001908152602001600020604051806101c001604052908160008201548152602001600182018054611cf690614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2290614f88565b8015611d6f5780601f10611d4457610100808354040283529160200191611d6f565b820191906000526020600020905b815481529060010190602001808311611d5257829003601f168201915b5050509183525050600282015460209091019060ff166003811115611d9657611d9661447d565b6003811115611da757611da761447d565b815260200160038201548152602001600482015481526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020016000905b82821015611ee157838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015611ece578382906000526020600020018054611e4190614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054611e6d90614f88565b8015611eba5780601f10611e8f57610100808354040283529160200191611eba565b820191906000526020600020905b815481529060010190602001808311611e9d57829003601f168201915b505050505081526020019060010190611e22565b5050505081526020019060010190611dee565b50505090825250600782015460208083019190915260088301546001600160a01b031660408084019190915280516009850180549384028201606090810184529282018481529483019491939092849291849160009085015b82821015611fe6578382906000526020600020018054611f5990614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8590614f88565b8015611fd25780601f10611fa757610100808354040283529160200191611fd2565b820191906000526020600020905b815481529060010190602001808311611fb557829003601f168201915b505050505081526020019060010190611f3a565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156120bf57838290600052602060002001805461203290614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461205e90614f88565b80156120ab5780601f10612080576101008083540402835291602001916120ab565b820191906000526020600020905b81548152906001019060200180831161208e57829003601f168201915b505050505081526020019060010190612013565b50505050815250508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b82821015612246578382906000526020600020906002020160405180604001604052908160008201805461212390614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461214f90614f88565b801561219c5780601f106121715761010080835404028352916020019161219c565b820191906000526020600020905b81548152906001019060200180831161217f57829003601f168201915b505050505081526020016001820180546121b590614f88565b80601f01602080910402602001604051908101604052809291908181526020018280546121e190614f88565b801561222e5780601f106122035761010080835404028352916020019161222e565b820191906000526020600020905b81548152906001019060200180831161221157829003601f168201915b505050505081525050815260200190600101906120f0565b505050508152602001600c820160009054906101000a900460ff16151515158152602001600d8201548152602001600e8201805480602002602001604051908101604052809291908181526020016000905b828210156122e0576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101612298565b505050915250506101008101519091506001600160a01b031633146000805b836101a00151518110156123525742846101a0015182815181106123255761232561506f565b60200260200101516020015111156123405760019150612352565b8061234a8161509b565b9150506122ff565b508115801561235f575080155b1561242357600060405180610140016040528085600001518152602001856040015160038111156123925761239261447d565b815260200185606001518152602001856080015181526020018560a0015181526020018560c0015181526020018560e0015181526020018561010001516001600160a01b03168152602001856101600151151581526020018561018001518152509050808787815181106124085761240861506f565b6020026020010181905250858061241e9061509b565b965050505b50505080806124319061509b565b915050611cb4565b6000818152600a602052604090206008810154336001600160a01b03909116036124755760405162461bcd60e51b815260040161063890615342565b6000600282015460ff1660038111156124905761249061447d565b146124ad5760405162461bcd60e51b81526004016106389061537e565b600c81015460ff166124d15760405162461bcd60e51b8152600401610638906153bb565b3481600d0154146124f45760405162461bcd60e51b8152600401610638906153ff565b60006040518060400160405280336001600160a01b031681526020016009544261251e919061540f565b9052600e830180546001818101835560009283526020808420855160029094020180546001600160a01b039485166001600160a01b031990911617815590850151910155600885015460405193945016913480156108fc0292909190818181858888f19350505050158015612597573d6000803e3d6000fd5b50505050565b6000818152600a6020908152604080832081516101c081019092528054825260018101805460609594840191906125d390614f88565b80601f01602080910402602001604051908101604052809291908181526020018280546125ff90614f88565b801561264c5780601f106126215761010080835404028352916020019161264c565b820191906000526020600020905b81548152906001019060200180831161262f57829003601f168201915b5050509183525050600282015460209091019060ff1660038111156126735761267361447d565b60038111156126845761268461447d565b815260200160038201548152602001600482015481526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020016000905b828210156127be57838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b828210156127ab57838290600052602060002001805461271e90614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461274a90614f88565b80156127975780601f1061276c57610100808354040283529160200191612797565b820191906000526020600020905b81548152906001019060200180831161277a57829003601f168201915b5050505050815260200190600101906126ff565b50505050815260200190600101906126cb565b50505090825250600782015460208083019190915260088301546001600160a01b031660408084019190915280516009850180549384028201606090810184529282018481529483019491939092849291849160009085015b828210156128c357838290600052602060002001805461283690614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461286290614f88565b80156128af5780601f10612884576101008083540402835291602001916128af565b820191906000526020600020905b81548152906001019060200180831161289257829003601f168201915b505050505081526020019060010190612817565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b8282101561299c57838290600052602060002001805461290f90614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461293b90614f88565b80156129885780601f1061295d57610100808354040283529160200191612988565b820191906000526020600020905b81548152906001019060200180831161296b57829003601f168201915b5050505050815260200190600101906128f0565b50505050815250508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b82821015612b235783829060005260206000209060020201604051806040016040529081600082018054612a0090614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054612a2c90614f88565b8015612a795780601f10612a4e57610100808354040283529160200191612a79565b820191906000526020600020905b815481529060010190602001808311612a5c57829003601f168201915b50505050508152602001600182018054612a9290614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054612abe90614f88565b8015612b0b5780601f10612ae057610100808354040283529160200191612b0b565b820191906000526020600020905b815481529060010190602001808311612aee57829003601f168201915b505050505081525050815260200190600101906129cd565b505050508152602001600c820160009054906101000a900460ff16151515158152602001600d8201548152602001600e8201805480602002602001604051908101604052809291908181526020016000905b82821015612bbd576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101612b75565b505050915250506101008101519091506001600160a01b03163314612bf45760405162461bcd60e51b8152600401610638906152d2565b612bfd8361380c565b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000600a6000838152602001908152602001600020604051806101c001604052908160008201548152602001600182018054612c6d90614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054612c9990614f88565b8015612ce65780601f10612cbb57610100808354040283529160200191612ce6565b820191906000526020600020905b815481529060010190602001808311612cc957829003601f168201915b5050509183525050600282015460209091019060ff166003811115612d0d57612d0d61447d565b6003811115612d1e57612d1e61447d565b815260200160038201548152602001600482015481526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020016000905b82821015612e5857838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015612e45578382906000526020600020018054612db890614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054612de490614f88565b8015612e315780601f10612e0657610100808354040283529160200191612e31565b820191906000526020600020905b815481529060010190602001808311612e1457829003601f168201915b505050505081526020019060010190612d99565b5050505081526020019060010190612d65565b50505090825250600782015460208083019190915260088301546001600160a01b031660408084019190915280516009850180549384028201606090810184529282018481529483019491939092849291849160009085015b82821015612f5d578382906000526020600020018054612ed090614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054612efc90614f88565b8015612f495780601f10612f1e57610100808354040283529160200191612f49565b820191906000526020600020905b815481529060010190602001808311612f2c57829003601f168201915b505050505081526020019060010190612eb1565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015613036578382906000526020600020018054612fa990614f88565b80601f0160208091040260200160405190810160405280929190818152602001828054612fd590614f88565b80156130225780601f10612ff757610100808354040283529160200191613022565b820191906000526020600020905b81548152906001019060200180831161300557829003601f168201915b505050505081526020019060010190612f8a565b50505050815250508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b828210156131bd578382906000526020600020906002020160405180604001604052908160008201805461309a90614f88565b80601f01602080910402602001604051908101604052809291908181526020018280546130c690614f88565b80156131135780601f106130e857610100808354040283529160200191613113565b820191906000526020600020905b8154815290600101906020018083116130f657829003601f168201915b5050505050815260200160018201805461312c90614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461315890614f88565b80156131a55780601f1061317a576101008083540402835291602001916131a5565b820191906000526020600020905b81548152906001019060200180831161318857829003601f168201915b50505050508152505081526020019060010190613067565b505050508152602001600c820160009054906101000a900460ff16151515158152602001600d8201548152602001600e8201805480602002602001604051908101604052809291908181526020016000905b82821015613257576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260019081015482840152908352909201910161320f565b505050915250506101008101519091506001600160a01b0316331461328e5760405162461bcd60e51b815260040161063890615462565b6000805b826101a00151518110156133455742836101a0015182815181106132b8576132b861506f565b6020026020010151602001511115613333576101808301516101a0840151805160019450839081106132ec576132ec61506f565b6020026020010151600001516001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015613330573d6000803e3d6000fd5b50505b8061333d8161509b565b915050613292565b5080610683576133548361391c565b81516000908152600a60205260408120818155906133756001830182614159565b60028201805460ff1916905560006003830181905560048301819055600583018190556133a6906006840190614193565b6000600783018190556008830180546001600160a01b031916905560098301906133d082826141b1565b6133de6001830160006141b1565b506133ef9050600b830160006141cf565b600c8201805460ff191690556000600d83018190556119ca90600e8401906141f0565b6000828152600a6020526040902060088101546001600160a01b0316331461344c5760405162461bcd60e51b8152600401610638906152d2565b6004015550565b613461600780546001019055565b600061346c60075490565b6000818152600a6020819052604082209293506134899034615488565b83835560028301805460ff19166001179055600383018a9055600483018990556005830188905586519091506134c89060068401906020890190614211565b5060078201859055600882018054336001600160a01b03199091168117909155600c8301805460ff1916861515179055600d83018290556135099084613925565b8154600283015460038401546004850154600586015460078701546008880154600c890154600d8a01546040517f5996221a4bd7bb1b70a7fd3ac034aab26f09310c39f8f624bd81762710fa920e9961358799909860ff9182169890979096909560068f019591946001600160a01b039091169392909116916155e6565b60405180910390a1505050505050505050565b60006001600160e01b03198216632483248360e11b148061053b575061053b8261393f565b6000818152600260205260409020546001600160a01b03166135f35760405162461bcd60e51b815260040161063890615248565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061362b826119d1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61366e338261398f565b61368a5760405162461bcd60e51b8152600401610638906156cc565b6106838383836139ed565b61068383838360405180602001604052806000815250611b67565b6000828152600260205260409020546001600160a01b03166136e45760405162461bcd60e51b815260040161063890615727565b60008281526006602052604090206136fc828261514e565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce78260405161372c9190614c1d565b60405180910390a15050565b816001600160a01b0316836001600160a01b0316036137695760405162461bcd60e51b81526004016106389061576b565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31906137cd908590614357565b60405180910390a3505050565b6137e4338361398f565b6138005760405162461bcd60e51b8152600401610638906156cc565b61259784848484613b15565b6060613817826135bf565b6000828152600660205260408120805461383090614f88565b80601f016020809104026020016040519081016040528092919081815260200182805461385c90614f88565b80156138a95780601f1061387e576101008083540402835291602001916138a9565b820191906000526020600020905b81548152906001019060200180831161388c57829003601f168201915b5050505050905060006138c760408051602081019091526000815290565b905080516000036138d9575092915050565b81511561390b5780826040516020016138f392919061579d565b60405160208183030381529060405292505050919050565b61391484613b48565b949350505050565b6135f381613bbb565b611af0828260405180602001604052806000815250613bfb565b60006001600160e01b031982166380ac58cd60e01b148061397057506001600160e01b03198216635b5e139f60e01b145b8061053b57506301ffc9a760e01b6001600160e01b031983161461053b565b60008061399b836119d1565b9050806001600160a01b0316846001600160a01b031614806139c257506139c28185612c04565b806139145750836001600160a01b03166139db846105d3565b6001600160a01b031614949350505050565b826001600160a01b0316613a00826119d1565b6001600160a01b031614613a265760405162461bcd60e51b8152600401610638906157f7565b6001600160a01b038216613a4c5760405162461bcd60e51b815260040161063890615848565b826001600160a01b0316613a5f826119d1565b6001600160a01b031614613a855760405162461bcd60e51b8152600401610638906157f7565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b613b208484846139ed565b613b2c84848484613c2e565b6125975760405162461bcd60e51b8152600401610638906158a7565b6060613b53826135bf565b6000613b6a60408051602081019091526000815290565b90506000815111613b8a5760405180602001604052806000815250612bfd565b80613b9484613d2f565b604051602001613ba592919061579d565b6040516020818303038152906040529392505050565b613bc481613dc2565b60008181526006602052604090208054613bdd90614f88565b1590506135f35760008181526006602052604081206135f391614159565b613c058383613e57565b613c126000848484613c2e565b6106835760405162461bcd60e51b8152600401610638906158a7565b60006001600160a01b0384163b15613d2457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613c729033908990889088906004016158b7565b6020604051808303816000875af1925050508015613cad575060408051601f3d908101601f19168201909252613caa91810190615906565b60015b613d0a573d808015613cdb576040519150601f19603f3d011682016040523d82523d6000602084013e613ce0565b606091505b508051600003613d025760405162461bcd60e51b8152600401610638906158a7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613914565b506001949350505050565b60606000613d3c83613f52565b60010190506000816001600160401b03811115613d5b57613d5b6149a1565b6040519080825280601f01601f191660200182016040528015613d85576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084613d8f575b509392505050565b6000613dcd826119d1565b9050613dd8826119d1565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b038216613e7d5760405162461bcd60e51b815260040161063890615959565b6000818152600260205260409020546001600160a01b031615613eb25760405162461bcd60e51b81526004016106389061599d565b6000818152600260205260409020546001600160a01b031615613ee75760405162461bcd60e51b81526004016106389061599d565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310613f915772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613fbd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310613fdb57662386f26fc10000830492506010015b6305f5e1008310613ff3576305f5e100830492506008015b612710831061400757612710830492506004015b60648310614019576064830492506002015b600a831061053b5760010192915050565b604080516101c0810182526000808252606060208084018290528385018390528184018390526080840183905260a0840183905260c0840182905260e084018390526101008401929092528351808501909452808452908301529061012082019081526020016060815260200160001515815260200160008152602001606081525090565b8280548282559060005260206000209081019282156140f5579160200282015b828111156140f557825182906140e5908261514e565b50916020019190600101906140cf565b5061410192915061426a565b5090565b604080516101408101909152600080825260208201908152600060208201819052604082018190526060808301829052608083015260a0820181905260c0820181905260e082018190526101009091015290565b50805461416590614f88565b6000825580601f10614175575050565b601f0160209004906000526020600020908101906135f39190614287565b50805460008255906000526020600020908101906135f3919061429c565b50805460008255906000526020600020908101906135f3919061426a565b50805460008255600202906000526020600020908101906135f391906142b9565b50805460008255600202906000526020600020908101906135f391906142e4565b82805482825590600052602060002090810192821561425e579160200282015b8281111561425e578251805161424e9184916020909101906140af565b5091602001919060010190614231565b5061410192915061429c565b8082111561410157600061427e8282614159565b5060010161426a565b5b808211156141015760008155600101614288565b808211156141015760006142b082826141b1565b5060010161429c565b808211156141015760006142cd8282614159565b6142db600183016000614159565b506002016142b9565b5b808211156141015780546001600160a01b0319168155600060018201556002016142e5565b6001600160e01b031981165b81146135f357600080fd5b803561053b8161430a565b60006020828403121561434157614341600080fd5b60006139148484614321565b8015155b82525050565b6020810161053b828461434d565b60005b83811015614380578181015183820152602001614368565b50506000910152565b6000614393825190565b8084526020840193506143aa818560208601614365565b601f01601f19169290920192915050565b60208082528101612bfd8184614389565b80614316565b803561053b816143cc565b6000602082840312156143f2576143f2600080fd5b600061391484846143d2565b60006001600160a01b03821661053b565b614351816143fe565b6020810161053b828461440f565b614316816143fe565b803561053b81614426565b6000806040838503121561445057614450600080fd5b600061445c858561442f565b925050602061446d858286016143d2565b9150509250929050565b80614351565b634e487b7160e01b600052602160045260246000fd5b600481106135f3576135f361447d565b806144ad81614493565b919050565b600061053b826144a3565b614351816144b2565b6000612bfd8383614389565b60006144dc825190565b808452602084019350836020820285016144f68560200190565b8060005b8581101561452b578484038952815161451385826144c6565b94506020830160209a909a01999250506001016144fa565b5091979650505050505050565b6000612bfd83836144d2565b600061454e825190565b808452602084019350836020820285016145688560200190565b8060005b8581101561452b57848403895281516145858582614538565b94506020830160209a909a019992505060010161456c565b80516040808452600091908401906145b582826144d2565b915050602083015184820360208601526145cf82826144d2565b95945050505050565b80516040808452600091908401906145f08282614389565b915050602083015184820360208601526145cf8282614389565b6000612bfd83836145d8565b6000614620825190565b8084526020840193508360208202850161463a8560200190565b8060005b8581101561452b5784840389528151614657858261460a565b94506020830160209a909a019992505060010161463e565b80516040830190614680848261440f565b5060208201516125976020850182614477565b600061469f838361466f565b505060400190565b60006146b1825190565b80845260209384019383018060005b838110156146e55781516146d48882614693565b9750602083019250506001016146c0565b509495945050505050565b80516000906101c08401906147058582614477565b506020830151848203602086015261471d8282614389565b915050604083015161473260408601826144bd565b5060608301516147456060860182614477565b5060808301516147586080860182614477565b5060a083015161476b60a0860182614477565b5060c083015184820360c08601526147838282614544565b91505060e083015161479860e0860182614477565b506101008301516147ad61010086018261440f565b506101208301518482036101208601526147c7828261459d565b9150506101408301518482036101408601526147e38282614616565b9150506101608301516147fa61016086018261434d565b5061018083015161480f610180860182614477565b506101a08301518482036101a08601526145cf82826146a7565b6000612bfd83836146f0565b600061483f825190565b808452602084019350836020820285016148598560200190565b8060005b8581101561452b57848403895281516148768582614829565b94506020830160209a909a019992505060010161485d565b60208082528101612bfd8184614835565b61016081016148ae828e614477565b81810360208301526148c0818d614389565b90506148cf604083018c6144bd565b6148dc606083018b614477565b6148e9608083018a614477565b6148f660a0830189614477565b61490360c0830188614477565b61491060e083018761440f565b818103610100830152614923818661459d565b905061493361012083018561434d565b614941610140830184614477565b9c9b505050505050505050505050565b60008060006060848603121561496957614969600080fd5b6000614975868661442f565b93505060206149868682870161442f565b9250506040614997868287016143d2565b9150509250925092565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b03821117156149dc576149dc6149a1565b6040525050565b60006149ee60405190565b90506144ad82826149b7565b60006001600160401b03821115614a1357614a136149a1565b5060209081020190565b60006001600160401b03821115614a3657614a366149a1565b601f19601f83011660200192915050565b82818337506000910152565b6000614a66614a6184614a1d565b6149e3565b905082815260208101848484011115614a8157614a81600080fd5b613dba848285614a47565b600082601f830112614aa057614aa0600080fd5b8135613914848260208601614a53565b6000614abe614a61846149fa565b83815290506020808201908402830185811115614add57614add600080fd5b835b81811015614b1d5780356001600160401b03811115614b0057614b00600080fd5b808601614b0d8982614a8c565b8552505060209283019201614adf565b5050509392505050565b600082601f830112614b3b57614b3b600080fd5b8135613914848260208601614ab0565b60008060008060808587031215614b6457614b64600080fd5b84356001600160401b03811115614b7d57614b7d600080fd5b614b8987828801614b27565b94505060208501356001600160401b03811115614ba857614ba8600080fd5b614bb487828801614b27565b9350506040614bc5878288016143d2565b92505060608501356001600160401b03811115614be457614be4600080fd5b614bf087828801614a8c565b91505092959194509250565b600060208284031215614c1157614c11600080fd5b6000613914848461442f565b6020810161053b8284614477565b60008060408385031215614c4157614c41600080fd5b600061445c85856143d2565b801515614316565b803561053b81614c4d565b60008060408385031215614c7657614c76600080fd5b6000614c82858561442f565b925050602061446d85828601614c55565b60008060008060808587031215614cac57614cac600080fd5b6000614cb8878761442f565b9450506020614bb48782880161442f565b8051600090610140840190614cde8582614477565b506020830151614cf160208601826144bd565b506040830151614d046040860182614477565b506060830151614d176060860182614477565b506080830151614d2a6080860182614477565b5060a083015184820360a0860152614d428282614544565b91505060c0830151614d5760c0860182614477565b5060e0830151614d6a60e086018261440f565b50610100830151614d7f61010086018261434d565b50610120830151613dba610120860182614477565b6000612bfd8383614cc9565b6000614daa825190565b80845260208401935083602082028501614dc48560200190565b8060005b8581101561452b5784840389528151614de18582614d94565b94506020830160209a909a0199925050600101614dc8565b60208082528101612bfd8184614da0565b60008060408385031215614e2057614e20600080fd5b6000614e2c858561442f565b925050602061446d8582860161442f565b6000614e4b614a61846149fa565b83815290506020808201908402830185811115614e6a57614e6a600080fd5b835b81811015614b1d5780356001600160401b03811115614e8d57614e8d600080fd5b808601614e9a8982614b27565b8552505060209283019201614e6c565b600082601f830112614ebe57614ebe600080fd5b8135613914848260208601614e3d565b60008060008060008060c08789031215614eea57614eea600080fd5b6000614ef689896143d2565b9650506020614f0789828a016143d2565b9550506040614f1889828a016143d2565b94505060608701356001600160401b03811115614f3757614f37600080fd5b614f4389828a01614eaa565b9350506080614f5489828a016143d2565b92505060a0614f6589828a01614c55565b9150509295509295509295565b634e487b7160e01b600052602260045260246000fd5b600281046001821680614f9c57607f821691505b602082108103614fae57614fae614f72565b50919050565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b602082015291505b5060400190565b6020808252810161053b81614fb4565b603d81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060208201529150614fee565b6020808252810161053b81615005565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982036150ae576150ae615085565b5060010190565b600061053b6150c18381565b90565b6150cd836150b5565b81546008840282811b60001990911b908116901990911617825550505050565b60006106838184846150c4565b81811015611af05761510d6000826150ed565b6001016150fa565b601f821115610683576000818152602090206020601f8501048101602085101561513c5750805b6119ca6020601f8601048301826150fa565b81516001600160401b03811115615167576151676149a1565b6151718254614f88565b61517c828285615115565b6020601f8311600181146151b057600084156151985750858201515b600019600886021c1981166002860217865550615209565b600085815260208120601f198616915b828110156151e057888501518255602094850194600190920191016151c0565b868310156151fc5784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b601881526000602082017f4552433732313a20696e76616c696420746f6b656e2049440000000000000000815291505b5060200190565b6020808252810161053b81615211565b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f7420612076618152683634b21037bbb732b960b91b60208201529150614fee565b6020808252810161053b81615258565b600d81526000602082016c1058d8d95cdcc819195b9a5959609a1b81529150615241565b6020808252810161053b816152ae565b805161053b816143cc565b60006020828403121561530257615302600080fd5b600061391484846152e2565b601f81526000602082017f596f752063616e27742072656e7420796f7572206f776e2070726f6a6563740081529150615241565b6020808252810161053b8161530e565b601581526000602082017450726f6a656374206973206e6f742061637469766560581b81529150615241565b6020808252810161053b81615352565b6016815260006020820175141c9bda9958dd081a5cdb89dd08199bdc881c995b9d60521b81529150615241565b6020808252810161053b8161538e565b601781526000602082017f52656e7420707269636520697320696e636f727265637400000000000000000081529150615241565b6020808252810161053b816153cb565b8082018082111561053b5761053b615085565b602381526000602082017f596f752063616e206f6e6c79206275726e20796f7572206f776e2070726f6a6581526263747360e81b60208201529150614fee565b6020808252810161053b81615422565b634e487b7160e01b600052601260045260246000fd5b60008261549757615497615472565b500490565b600081546154a981614f88565b8085526020850194506001821680156154c957600181146154df5761550d565b60ff19831686526020821515028601935061550d565b60008581526020902060005b83811015615507578154888201526001909101906020016154eb565b87019450505b50505092915050565b6000612bfd838361549c565b600061552c825490565b8084526020840193508360208202850161554c8560009081526020902090565b8060005b8581101561452b578484038952816155688582615516565b60209a909a019994505060019182019101615550565b6000612bfd8383615522565b6000615594825490565b808452602084019350836020820285016155b48560009081526020902090565b8060005b8581101561452b578484038952816155d0858261557e565b60209a909a0199945050600191820191016155b8565b61014081016155f5828d614477565b615602602083018c6144bd565b61560f604083018b614477565b61561c606083018a614477565b6156296080830189614477565b81810360a083015261563b818861558a565b905061564a60c0830187614477565b61565760e083018661440f565b61566561010083018561434d565b615673610120830184614477565b9b9a5050505050505050505050565b602d81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581526c1c881bdc88185c1c1c9bdd9959609a1b60208201529150614fee565b6020808252810161053b81615682565b602e81526000602082017f45524337323155524953746f726167653a2055524920736574206f66206e6f6e81526d32bc34b9ba32b73a103a37b5b2b760911b60208201529150614fee565b6020808252810161053b816156dc565b601981526000602082017f4552433732313a20617070726f766520746f2063616c6c65720000000000000081529150615241565b6020808252810161053b81615737565b6000615785825190565b615793818560208601614365565b9290920192915050565b60006157a9828561577b565b9150613914828461577b565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b60208201529150614fee565b6020808252810161053b816157b5565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b60208201529150614fee565b6020808252810161053b81615807565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60208201529150614fee565b6020808252810161053b81615858565b608081016158c5828761440f565b6158d2602083018661440f565b6158df6040830185614477565b81810360608301526158f18184614389565b9695505050505050565b805161053b8161430a565b60006020828403121561591b5761591b600080fd5b600061391484846158fb565b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526000615241565b6020808252810161053b81615927565b601c81526000602082017f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081529150615241565b6020808252810161053b8161596956fea2646970667358221220a710e47bf22423f6c72e6768e0197bcf0ec795ccc33d2595f277acbc7e9bffe464736f6c63430008110033",
	"deployedBytecode": "",
	"devdoc": {
		"kind": "dev",
		"methods": {
			"approve(address,uint256)": {
				"details": "See {IERC721-approve}."
			},
			"balanceOf(address)": {
				"details": "See {IERC721-balanceOf}."
			},
			"getApproved(uint256)": {
				"details": "See {IERC721-getApproved}."
			},
			"isApprovedForAll(address,address)": {
				"details": "See {IERC721-isApprovedForAll}."
			},
			"name()": {
				"details": "See {IERC721Metadata-name}."
			},
			"ownerOf(uint256)": {
				"details": "See {IERC721-ownerOf}."
			},
			"setApprovalForAll(address,bool)": {
				"details": "See {IERC721-setApprovalForAll}."
			},
			"symbol()": {
				"details": "See {IERC721Metadata-symbol}."
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"storageLayout": {
		"storage": [
			{
				"astId": 53,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_name",
				"offset": 0,
				"slot": "0",
				"type": "t_string_storage"
			},
			{
				"astId": 55,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_symbol",
				"offset": 0,
				"slot": "1",
				"type": "t_string_storage"
			},
			{
				"astId": 59,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_owners",
				"offset": 0,
				"slot": "2",
				"type": "t_mapping(t_uint256,t_address)"
			},
			{
				"astId": 63,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_balances",
				"offset": 0,
				"slot": "3",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 67,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_tokenApprovals",
				"offset": 0,
				"slot": "4",
				"type": "t_mapping(t_uint256,t_address)"
			},
			{
				"astId": 73,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_operatorApprovals",
				"offset": 0,
				"slot": "5",
				"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
			},
			{
				"astId": 1104,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "_tokenURIs",
				"offset": 0,
				"slot": "6",
				"type": "t_mapping(t_uint256,t_string_storage)"
			},
			{
				"astId": 2956,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "projectIdCounter",
				"offset": 0,
				"slot": "7",
				"type": "t_struct(Counter)1629_storage"
			},
			{
				"astId": 2958,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "dataFeedsAddress",
				"offset": 0,
				"slot": "8",
				"type": "t_address"
			},
			{
				"astId": 2961,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "rentTime",
				"offset": 0,
				"slot": "9",
				"type": "t_uint256"
			},
			{
				"astId": 3049,
				"contract": "contracts/BIOrbit.sol:BIOrbit",
				"label": "Projects",
				"offset": 0,
				"slot": "10",
				"type": "t_mapping(t_uint256,t_struct(Project)3020_storage)"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_array(t_array(t_string_storage)dyn_storage)dyn_storage": {
				"base": "t_array(t_string_storage)dyn_storage",
				"encoding": "dynamic_array",
				"label": "string[][]",
				"numberOfBytes": "32"
			},
			"t_array(t_string_storage)dyn_storage": {
				"base": "t_string_storage",
				"encoding": "dynamic_array",
				"label": "string[]",
				"numberOfBytes": "32"
			},
			"t_array(t_struct(Monitoring)2976_storage)dyn_storage": {
				"base": "t_struct(Monitoring)2976_storage",
				"encoding": "dynamic_array",
				"label": "struct BIOrbit.Monitoring[]",
				"numberOfBytes": "32"
			},
			"t_array(t_struct(RentInfo)2971_storage)dyn_storage": {
				"base": "t_struct(RentInfo)2971_storage",
				"encoding": "dynamic_array",
				"label": "struct BIOrbit.RentInfo[]",
				"numberOfBytes": "32"
			},
			"t_bool": {
				"encoding": "inplace",
				"label": "bool",
				"numberOfBytes": "1"
			},
			"t_bytes32": {
				"encoding": "inplace",
				"label": "bytes32",
				"numberOfBytes": "32"
			},
			"t_enum(State)2966": {
				"encoding": "inplace",
				"label": "enum BIOrbit.State",
				"numberOfBytes": "1"
			},
			"t_mapping(t_address,t_bool)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => bool)",
				"numberOfBytes": "32",
				"value": "t_bool"
			},
			"t_mapping(t_address,t_mapping(t_address,t_bool))": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => mapping(address => bool))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_bool)"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_mapping(t_uint256,t_address)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => address)",
				"numberOfBytes": "32",
				"value": "t_address"
			},
			"t_mapping(t_uint256,t_string_storage)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => string)",
				"numberOfBytes": "32",
				"value": "t_string_storage"
			},
			"t_mapping(t_uint256,t_struct(Project)3020_storage)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => struct BIOrbit.Project)",
				"numberOfBytes": "32",
				"value": "t_struct(Project)3020_storage"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_struct(Counter)1629_storage": {
				"encoding": "inplace",
				"label": "struct Counters.Counter",
				"members": [
					{
						"astId": 1628,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "_value",
						"offset": 0,
						"slot": "0",
						"type": "t_uint256"
					}
				],
				"numberOfBytes": "32"
			},
			"t_struct(ImageTimeSeries)2983_storage": {
				"encoding": "inplace",
				"label": "struct BIOrbit.ImageTimeSeries",
				"members": [
					{
						"astId": 2979,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "detectionDate",
						"offset": 0,
						"slot": "0",
						"type": "t_array(t_string_storage)dyn_storage"
					},
					{
						"astId": 2982,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "forestCoverExtension",
						"offset": 0,
						"slot": "1",
						"type": "t_array(t_string_storage)dyn_storage"
					}
				],
				"numberOfBytes": "64"
			},
			"t_struct(Monitoring)2976_storage": {
				"encoding": "inplace",
				"label": "struct BIOrbit.Monitoring",
				"members": [
					{
						"astId": 2973,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "detectionDate",
						"offset": 0,
						"slot": "0",
						"type": "t_string_storage"
					},
					{
						"astId": 2975,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "forestCoverExtension",
						"offset": 0,
						"slot": "1",
						"type": "t_string_storage"
					}
				],
				"numberOfBytes": "64"
			},
			"t_struct(Project)3020_storage": {
				"encoding": "inplace",
				"label": "struct BIOrbit.Project",
				"members": [
					{
						"astId": 2985,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "id",
						"offset": 0,
						"slot": "0",
						"type": "t_uint256"
					},
					{
						"astId": 2987,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "uri",
						"offset": 0,
						"slot": "1",
						"type": "t_string_storage"
					},
					{
						"astId": 2990,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "state",
						"offset": 0,
						"slot": "2",
						"type": "t_enum(State)2966"
					},
					{
						"astId": 2992,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "name",
						"offset": 0,
						"slot": "3",
						"type": "t_bytes32"
					},
					{
						"astId": 2994,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "description",
						"offset": 0,
						"slot": "4",
						"type": "t_bytes32"
					},
					{
						"astId": 2996,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "extension",
						"offset": 0,
						"slot": "5",
						"type": "t_bytes32"
					},
					{
						"astId": 3000,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "footprint",
						"offset": 0,
						"slot": "6",
						"type": "t_array(t_array(t_string_storage)dyn_storage)dyn_storage"
					},
					{
						"astId": 3002,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "country",
						"offset": 0,
						"slot": "7",
						"type": "t_bytes32"
					},
					{
						"astId": 3004,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "owner",
						"offset": 0,
						"slot": "8",
						"type": "t_address"
					},
					{
						"astId": 3007,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "imageTimeSeries",
						"offset": 0,
						"slot": "9",
						"type": "t_struct(ImageTimeSeries)2983_storage"
					},
					{
						"astId": 3011,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "monitoring",
						"offset": 0,
						"slot": "11",
						"type": "t_array(t_struct(Monitoring)2976_storage)dyn_storage"
					},
					{
						"astId": 3013,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "isRent",
						"offset": 0,
						"slot": "12",
						"type": "t_bool"
					},
					{
						"astId": 3015,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "rentCost",
						"offset": 0,
						"slot": "13",
						"type": "t_uint256"
					},
					{
						"astId": 3019,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "rentInfo",
						"offset": 0,
						"slot": "14",
						"type": "t_array(t_struct(RentInfo)2971_storage)dyn_storage"
					}
				],
				"numberOfBytes": "480"
			},
			"t_struct(RentInfo)2971_storage": {
				"encoding": "inplace",
				"label": "struct BIOrbit.RentInfo",
				"members": [
					{
						"astId": 2968,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "renter",
						"offset": 0,
						"slot": "0",
						"type": "t_address"
					},
					{
						"astId": 2970,
						"contract": "contracts/BIOrbit.sol:BIOrbit",
						"label": "expiry",
						"offset": 0,
						"slot": "1",
						"type": "t_uint256"
					}
				],
				"numberOfBytes": "64"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	}
}
